/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.jaxb;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.Writer;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DocumentException;
import org.dom4j.io.OutputFormat;
import org.dom4j.jaxb.JAXBModifier;
import org.dom4j.jaxb.JAXBObjectModifier;
import org.evosuite.Properties.SandboxMode;
import org.evosuite.sandbox.Sandbox;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.xml.sax.InputSource;

@RunWith(EvoSuiteRunner.class)
public class TestJAXBModifier {

  private static ExecutorService executor; 

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
    org.evosuite.Properties.SANDBOX_MODE = SandboxMode.RECOMMENDED; 
    Sandbox.initializeSecurityManagerForSUT(); 
    executor = Executors.newCachedThreadPool(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    executor.shutdownNow(); 
    Sandbox.resetDefaultSecurityManager(); 
  } 

  @Before 
  public void initTestCase(){ 
    Sandbox.goingToExecuteSUTCode(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    Sandbox.doneWithExecutingSUTCode(); 
  } 


  @Test
  public void test0()  throws Throwable  {
      JAXBModifier jAXBModifier0 = new JAXBModifier("drW,SJ21HL");
      jAXBModifier0.addObjectModifier("drW,SJ21HL", (JAXBObjectModifier) null);
      try {
        jAXBModifier0.modify((Reader) null);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * null Nested exception: null
         */
      }
  }

  @Test
  public void test1()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(" `MQ+y0", true);
      JAXBModifier jAXBModifier0 = new JAXBModifier(" `MQ+y0", outputFormat0);
      File file0 = new File("Y .8)*=lVJN9s\"hDw");
      try {
        jAXBModifier0.modify(file0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Y .8)*=lVJN9s\"hDw (No such file or directory) Nested exception: Y .8)*=lVJN9s\"hDw (No such file or directory)
         */
      }
  }

  @Test
  public void test2()  throws Throwable  {
      JAXBModifier jAXBModifier0 = new JAXBModifier("");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) pushbackInputStream0);
      try {
        jAXBModifier0.modify((InputStream) dataInputStream0, "");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Stream closed Nested exception: Stream closed
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(" `MQ+y0", true);
      JAXBModifier jAXBModifier0 = new JAXBModifier(" `MQ+y0", outputFormat0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(117);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      jAXBModifier0.setOutput((OutputStream) pipedOutputStream0);
  }

  @Test
  public void test4()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JAXBModifier jAXBModifier0 = new JAXBModifier("-lineSeparator", classLoader0);
      try {
        jAXBModifier0.modify((InputSource) null);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * null Nested exception: null
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      JAXBModifier jAXBModifier0 = new JAXBModifier("fa9", (OutputFormat) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(102);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) pipedInputStream0);
      try {
        jAXBModifier0.modify((InputStream) pushbackInputStream0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Pipe not connected Nested exception: Pipe not connected
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JAXBModifier jAXBModifier0 = new JAXBModifier("v6J", classLoader0);
      PipedReader pipedReader0 = new PipedReader(34);
      PushbackReader pushbackReader0 = new PushbackReader((Reader) pipedReader0, 1068);
      try {
        jAXBModifier0.modify((Reader) pushbackReader0, "v6J");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Pipe not connected Nested exception: Pipe not connected
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      JAXBModifier jAXBModifier0 = new JAXBModifier("");
      try {
        jAXBModifier0.modify("");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line 1 of document file:///mnt/fastdata/ac1gf/SF110/dist/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JAXBModifier jAXBModifier0 = new JAXBModifier("v6J", classLoader0);
      jAXBModifier0.setPruneElements(true);
      assertEquals(true, jAXBModifier0.isPruneElements());
  }

  @Test
  public void test9()  throws Throwable  {
      JAXBModifier jAXBModifier0 = new JAXBModifier("Fli:T!2[U");
      File file0 = new File("Fli:T!2[U");
      URI uRI0 = file0.toURI();
      URL uRL0 = uRI0.toURL();
      try {
        jAXBModifier0.modify(uRL0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * /mnt/fastdata/ac1gf/SF110/dist/62_dom4j/Fli:T!2[U (No such file or directory) Nested exception: /mnt/fastdata/ac1gf/SF110/dist/62_dom4j/Fli:T!2[U (No such file or directory)
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      JAXBModifier jAXBModifier0 = new JAXBModifier("");
      jAXBModifier0.removeObjectModifier("");
      assertEquals(false, jAXBModifier0.isPruneElements());
  }

  @Test
  public void test11()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      JAXBModifier jAXBModifier0 = new JAXBModifier("$^F!2(fhgZ@g,l~", classLoader0);
      File file0 = new File("$^F!2(fhgZ@g,l~");
      try {
        jAXBModifier0.modify(file0, (Charset) null);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * $^F!2(fhgZ@g,l~ (No such file or directory) Nested exception: $^F!2(fhgZ@g,l~ (No such file or directory)
         */
      }
  }

  @Test
  public void test12()  throws Throwable  {
      JAXBModifier jAXBModifier0 = new JAXBModifier("");
      jAXBModifier0.resetObjectModifiers();
      assertEquals(false, jAXBModifier0.isPruneElements());
  }

  @Test
  public void test13()  throws Throwable  {
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      OutputFormat outputFormat0 = new OutputFormat();
      JAXBModifier jAXBModifier0 = new JAXBModifier("-encoding", classLoader0, outputFormat0);
      assertEquals(false, jAXBModifier0.isPruneElements());
  }

  @Test
  public void test14()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          JAXBModifier jAXBModifier0 = new JAXBModifier("");
          File file0 = new File("", "");
          jAXBModifier0.setOutput((Writer) null);
          // Undeclared exception!
          try {
            jAXBModifier0.setOutput(file0);
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.io.FilePermission\" \"/\" \"write\")
             * java.lang.Thread.getStackTrace(Thread.java:1567)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkWrite(SecurityManager.java:979)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:203)
             * java.io.FileOutputStream.<init>(FileOutputStream.java:165)
             * org.dom4j.jaxb.JAXBModifier.setOutput(JAXBModifier.java:281)
             * sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             * sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
             * sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             * java.lang.reflect.Method.invoke(Method.java:601)
             * org.evosuite.testcase.MethodStatement$1.execute(MethodStatement.java:262)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.MethodStatement.execute(MethodStatement.java:217)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)
             * java.util.concurrent.FutureTask.run(FutureTask.java:166)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)
             * java.lang.Thread.run(Thread.java:722)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
