/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.dom;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMAttribute;
import org.dom4j.dom.DOMAttributeNodeMap;
import org.dom4j.dom.DOMElement;
import org.dom4j.util.NonLazyElement;
import org.junit.BeforeClass;
import org.w3c.dom.DOMException;
import org.w3c.dom.Node;

@RunWith(EvoSuiteRunner.class)
public class TestDOMAttributeNodeMap {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      DOMAttributeNodeMap dOMAttributeNodeMap0 = new DOMAttributeNodeMap(dOMElement0);
      int int0 = dOMAttributeNodeMap0.getLength();
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("^h");
      DOMAttributeNodeMap dOMAttributeNodeMap0 = new DOMAttributeNodeMap(dOMElement0);
      Node node0 = dOMAttributeNodeMap0.getNamedItemNS("^h", "^h");
      assertNull(node0);
  }

  @Test
  public void test2()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("", (Namespace) null);
      DOMAttributeNodeMap dOMAttributeNodeMap0 = new DOMAttributeNodeMap(dOMElement0);
      Node node0 = dOMAttributeNodeMap0.item((-947));
      assertNull(node0);
  }

  @Test
  public void test3()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      DOMAttributeNodeMap dOMAttributeNodeMap0 = new DOMAttributeNodeMap(dOMElement0);
      Node node0 = dOMAttributeNodeMap0.getNamedItem("");
      assertNull(node0);
  }

  @Test
  public void test4()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      DOMAttributeNodeMap dOMAttributeNodeMap0 = new DOMAttributeNodeMap(dOMElement0);
      try {
        dOMAttributeNodeMap0.setNamedItem((Node) dOMElement0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Node is not an Attr: org.dom4j.dom.DOMElement@1a49cc89 [Element: < attributes: []/>]
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("^h");
      DOMElement dOMElement0 = new DOMElement("^h");
      DOMAttributeNodeMap dOMAttributeNodeMap0 = new DOMAttributeNodeMap(dOMElement0);
      QName qName0 = nonLazyElement0.getQName();
      DOMAttribute dOMAttribute0 = new DOMAttribute(qName0, "^h");
      dOMAttributeNodeMap0.setNamedItem((Node) dOMAttribute0);
      assertEquals(1, dOMAttributeNodeMap0.getLength());
      assertEquals(true, dOMElement0.hasAttributes());
  }

  @Test
  public void test6()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("^h");
      DOMElement dOMElement0 = new DOMElement("^h");
      DOMAttributeNodeMap dOMAttributeNodeMap0 = new DOMAttributeNodeMap(dOMElement0);
      QName qName0 = nonLazyElement0.getQName();
      DOMAttribute dOMAttribute0 = new DOMAttribute(qName0, "^h");
      dOMAttributeNodeMap0.setNamedItemNS((Node) dOMAttribute0);
      assertEquals("<^h ^h=\"^h\"/>", dOMElement0.asXML());
      
      dOMAttributeNodeMap0.removeNamedItem("^h");
      assertEquals(0, dOMAttributeNodeMap0.getLength());
  }

  @Test
  public void test7()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("", (Namespace) null);
      DOMAttributeNodeMap dOMAttributeNodeMap0 = new DOMAttributeNodeMap(dOMElement0);
      try {
        dOMAttributeNodeMap0.removeNamedItem("");
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * No attribute named 
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("");
      DOMAttributeNodeMap dOMAttributeNodeMap0 = new DOMAttributeNodeMap(dOMElement0);
      try {
        dOMAttributeNodeMap0.setNamedItemNS((Node) dOMElement0);
        fail("Expecting exception: DOMException");
      } catch(DOMException e) {
        /*
         * Node is not an Attr: org.dom4j.dom.DOMElement@5ebaf4cc [Element: < attributes: []/>]
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("", (Namespace) null);
      DOMAttributeNodeMap dOMAttributeNodeMap0 = new DOMAttributeNodeMap(dOMElement0);
      Node node0 = dOMAttributeNodeMap0.removeNamedItemNS("", "");
      assertNull(node0);
  }
}
