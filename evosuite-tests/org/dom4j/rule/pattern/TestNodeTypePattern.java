/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.rule.pattern;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import org.dom4j.Node;
import org.dom4j.NodeType;
import org.dom4j.dom.DOMProcessingInstruction;
import org.dom4j.rule.Pattern;
import org.dom4j.rule.pattern.NodeTypePattern;
import org.dom4j.util.IndexedElement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestNodeTypePattern {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NodeTypePattern nodeTypePattern0 = NodeTypePattern.ANY_DOCUMENT;
      String string0 = nodeTypePattern0.getMatchesNodeName();
      assertNull(string0);
  }

  @Test
  public void test1()  throws Throwable  {
      NodeTypePattern nodeTypePattern0 = NodeTypePattern.ANY_PROCESSING_INSTRUCTION;
      Pattern[] patternArray0 = nodeTypePattern0.getUnionPatterns();
      assertNull(patternArray0);
  }

  @Test
  public void test2()  throws Throwable  {
      NodeTypePattern nodeTypePattern0 = NodeTypePattern.ANY_PROCESSING_INSTRUCTION;
      NodeType nodeType0 = nodeTypePattern0.getMatchType();
      NodeTypePattern nodeTypePattern1 = new NodeTypePattern(nodeType0);
      assertEquals(0.5, nodeTypePattern1.getPriority(), 0.01D);
  }

  @Test
  public void test3()  throws Throwable  {
      NodeTypePattern nodeTypePattern0 = NodeTypePattern.ANY_DOCUMENT;
      double double0 = nodeTypePattern0.getPriority();
      assertEquals(0.5, double0, 0.01D);
  }

  @Test
  public void test4()  throws Throwable  {
      NodeTypePattern nodeTypePattern0 = NodeTypePattern.ANY_TEXT;
      IndexedElement indexedElement0 = new IndexedElement((String) null);
      boolean boolean0 = nodeTypePattern0.matches((Node) indexedElement0);
      assertEquals(false, boolean0);
  }

  @Test
  public void test5()  throws Throwable  {
      NodeTypePattern nodeTypePattern0 = NodeTypePattern.ANY_PROCESSING_INSTRUCTION;
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("", "");
      boolean boolean0 = nodeTypePattern0.matches((Node) dOMProcessingInstruction0);
      assertEquals(true, boolean0);
  }
}
