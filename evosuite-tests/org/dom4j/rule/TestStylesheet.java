/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.rule;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import org.dom4j.DocumentType;
import org.dom4j.Element;
import org.dom4j.InvalidXPathException;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.QName;
import org.dom4j.XPath;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.rule.Action;
import org.dom4j.rule.Pattern;
import org.dom4j.rule.Rule;
import org.dom4j.rule.Stylesheet;
import org.dom4j.rule.pattern.NodeTypePattern;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultDocumentType;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.FlyweightAttribute;
import org.dom4j.tree.FlyweightProcessingInstruction;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataAttribute;
import org.dom4j.util.UserDataElement;
import org.dom4j.xpath.DefaultXPath;
import org.jaxen.expr.DefaultExpr;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestStylesheet {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      NodeTypePattern nodeTypePattern0 = NodeTypePattern.ANY_TEXT;
      Rule rule0 = new Rule((Pattern) nodeTypePattern0, (Action) null);
      stylesheet0.removeRule(rule0);
      assertEquals(0, rule0.getImportPrecedence());
  }

  @Test
  public void test1()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      try {
        stylesheet0.run((List) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      stylesheet0.setValueOfAction((Action) null);
      assertNull(stylesheet0.getModeName());
  }

  @Test
  public void test3()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      NonLazyElement nonLazyElement0 = new NonLazyElement((String) null);
      stylesheet0.run((Node) nonLazyElement0);
      assertEquals(false, nonLazyElement0.isRootElement());
  }

  @Test
  public void test4()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      FlyweightAttribute flyweightAttribute0 = new FlyweightAttribute((String) null, (String) null);
      Namespace namespace0 = flyweightAttribute0.getNamespace();
      List<Object> list0 = DefaultExpr.convertToList((Object) namespace0);
      stylesheet0.applyTemplates((Object) list0);
      assertNull(stylesheet0.getModeName());
  }

  @Test
  public void test5()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      stylesheet0.clear();
      assertNull(stylesheet0.getModeName());
  }

  @Test
  public void test6()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DefaultXPath defaultXPath0 = (DefaultXPath)dOMDocumentType0.createXPath("DocmentFragmen");
      stylesheet0.applyTemplates((Object) stylesheet0, (XPath) defaultXPath0);
      assertEquals("DocmentFragmen", defaultXPath0.getText());
  }

  @Test
  public void test7()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      List<Object> list0 = DefaultExpr.convertToList((Object) namespace0);
      stylesheet0.run((Object) list0);
      assertNull(stylesheet0.getModeName());
  }

  @Test
  public void test8()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      stylesheet0.setModeName((String) null);
      assertNull(stylesheet0.getModeName());
  }

  @Test
  public void test9()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      Action action0 = stylesheet0.getValueOfAction();
      assertNull(action0);
  }

  @Test
  public void test10()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      NodeTypePattern nodeTypePattern0 = NodeTypePattern.ANY_TEXT;
      Rule rule0 = new Rule((Pattern) nodeTypePattern0, (Action) null);
      stylesheet0.addRule(rule0);
      assertEquals(1, rule0.getAppearenceCount());
  }

  @Test
  public void test11()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      String string0 = stylesheet0.getModeName();
      assertNull(string0);
  }

  @Test
  public void test12()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      FlyweightProcessingInstruction flyweightProcessingInstruction0 = new FlyweightProcessingInstruction("o`@", "o`@");
      stylesheet0.run((Object) flyweightProcessingInstruction0, "o`@");
      assertEquals("o`@", flyweightProcessingInstruction0.getTarget());
  }

  @Test
  public void test13()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      stylesheet0.run((Object) stylesheet0);
      assertNull(stylesheet0.getModeName());
  }

  @Test
  public void test14()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      List<Object> list0 = DefaultExpr.convertToList((Object) null);
      stylesheet0.run((List) list0, (String) null);
      assertNull(stylesheet0.getModeName());
  }

  @Test
  public void test15()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      NonLazyElement nonLazyElement0 = new NonLazyElement("H*PqRu");
      BeanElement beanElement0 = new BeanElement("H*PqRu", (Namespace) null, (Object) nonLazyElement0);
      FlyweightAttribute flyweightAttribute0 = new FlyweightAttribute("H*PqRu", "H*PqRu", (Namespace) null);
      QName qName0 = flyweightAttribute0.getQName();
      UserDataAttribute userDataAttribute0 = new UserDataAttribute(qName0);
      DefaultXPath defaultXPath0 = (DefaultXPath)userDataAttribute0.createXPath("H*PqRu");
      try {
        stylesheet0.applyTemplates((Object) beanElement0, (XPath) defaultXPath0, "H*PqRu");
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      UserDataElement userDataElement0 = new UserDataElement("");
      UserDataElement userDataElement1 = (UserDataElement)userDataElement0.addEntity("", "");
      stylesheet0.applyTemplates((Object) userDataElement1, "");
      assertEquals("Element", userDataElement1.getNodeTypeName());
  }

  @Test
  public void test17()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      DefaultElement defaultElement0 = new DefaultElement("bX");
      DefaultDocumentType defaultDocumentType0 = new DefaultDocumentType("bX", "bX");
      DefaultDocument defaultDocument0 = new DefaultDocument((Element) defaultElement0, (DocumentType) defaultDocumentType0);
      List<Object> list0 = DefaultExpr.convertToList((Object) defaultDocument0);
      stylesheet0.applyTemplates((Object) list0, "bX");
      assertEquals(1, list0.size());
  }

  @Test
  public void test18()  throws Throwable  {
      Stylesheet stylesheet0 = new Stylesheet();
      stylesheet0.applyTemplates((Object) stylesheet0);
      assertNull(stylesheet0.getModeName());
  }
}
