/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.rule;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.HashMap;
import java.util.Map;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.NodeType;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMEntityReference;
import org.dom4j.rule.Action;
import org.dom4j.rule.Mode;
import org.dom4j.rule.NullAction;
import org.dom4j.rule.Pattern;
import org.dom4j.rule.Rule;
import org.dom4j.rule.RuleSet;
import org.dom4j.rule.pattern.NodeTypePattern;
import org.dom4j.tree.BaseElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.xpath.XPathPattern;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestMode {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Mode mode0 = new Mode();
      mode0.fireRule((Node) null);
  }

  @Test
  public void test1()  throws Throwable  {
      Mode mode0 = new Mode();
      BaseElement baseElement0 = new BaseElement("--");
      BaseElement baseElement1 = (BaseElement)baseElement0.addAttribute("--", "--");
      mode0.applyTemplates((Element) baseElement1);
      assertSame(baseElement1, baseElement0);
  }

  @Test
  public void test2()  throws Throwable  {
      Mode mode0 = new Mode();
      Namespace namespace0 = Namespace.get("NF11", "NF11");
      NonLazyElement nonLazyElement0 = new NonLazyElement("NF11", namespace0);
      XPathPattern xPathPattern0 = (XPathPattern)nonLazyElement0.createPattern("NF11");
      NullAction nullAction0 = NullAction.SINGLETON;
      Rule rule0 = new Rule((Pattern) xPathPattern0, (Action) nullAction0);
      mode0.addRule(rule0);
      mode0.fireRule((Node) nonLazyElement0);
      assertEquals("NF11:NF11", nonLazyElement0.getXPathNameStep());
  }

  @Test
  public void test3()  throws Throwable  {
      Mode mode0 = new Mode();
      DOMDocument dOMDocument0 = new DOMDocument("NF11");
      DOMDocument dOMDocument1 = (DOMDocument)dOMDocument0.addComment("NF11");
      mode0.applyTemplates((Document) dOMDocument1);
      assertEquals("#document", dOMDocument1.getNodeName());
  }

  @Test
  public void test4()  throws Throwable  {
      Mode mode0 = new Mode();
      NodeType nodeType0 = NodeType.DOCUMENT_NODE;
      mode0.getRuleSet(nodeType0);
      DOMEntityReference dOMEntityReference0 = new DOMEntityReference("xE.+j");
      XPathPattern xPathPattern0 = (XPathPattern)dOMEntityReference0.createPattern("xE.+j");
      Rule rule0 = new Rule((Pattern) xPathPattern0);
      mode0.addRule(rule0);
      assertEquals(NodeType.ANY_NODE, rule0.getMatchType());
  }

  @Test
  public void test5()  throws Throwable  {
      Mode mode0 = new Mode();
      DOMEntityReference dOMEntityReference0 = new DOMEntityReference("xE.+j");
      XPathPattern xPathPattern0 = (XPathPattern)dOMEntityReference0.createPattern("xE.+j");
      Rule rule0 = new Rule((Pattern) xPathPattern0);
      mode0.removeRule(rule0);
      assertNull(rule0.getMode());
  }

  @Test
  public void test6()  throws Throwable  {
      Mode mode0 = new Mode();
      NodeTypePattern nodeTypePattern0 = NodeTypePattern.ANY_ATTRIBUTE;
      Rule rule0 = new Rule((Pattern) nodeTypePattern0);
      mode0.removeRule(rule0);
      assertEquals(0.5, rule0.getPriority(), 0.01D);
  }

  @Test
  public void test7()  throws Throwable  {
      Mode mode0 = new Mode();
      NodeType nodeType0 = NodeType.COMMENT_NODE;
      mode0.getRuleSet(nodeType0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("UtM_DT/_", "UtM_DT/_");
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0, 1727);
      NonLazyElement nonLazyElement1 = (NonLazyElement)nonLazyElement0.addComment("UtM_DT/_");
      mode0.applyTemplates((Element) nonLazyElement1);
      assertEquals("", nonLazyElement1.getTextTrim());
  }

  @Test
  public void test8()  throws Throwable  {
      Mode mode0 = new Mode();
      Map<String, RuleSet> map0 = mode0.addToNameMap((Map<String, RuleSet>) null, "{@", (Rule) null);
      assertNotNull(map0);
      
      Map<String, RuleSet> map1 = mode0.addToNameMap(map0, "{@", (Rule) null);
      assertEquals(false, map1.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      Mode mode0 = new Mode();
      Rule rule0 = new Rule();
      mode0.removeFromNameMap((Map<String, RuleSet>) null, "UtM_DT/_", rule0);
      assertEquals(0, rule0.getAppearenceCount());
  }

  @Test
  public void test10()  throws Throwable  {
      Mode mode0 = new Mode();
      HashMap<String, RuleSet> hashMap0 = new HashMap<String, RuleSet>();
      mode0.removeFromNameMap((Map<String, RuleSet>) hashMap0, "", (Rule) null);
      assertEquals(0, hashMap0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      Mode mode0 = new Mode();
      Namespace namespace0 = Namespace.get("NF11", "NF11");
      NonLazyElement nonLazyElement0 = new NonLazyElement("NF11", namespace0);
      XPathPattern xPathPattern0 = (XPathPattern)nonLazyElement0.createPattern("NF11");
      NullAction nullAction0 = NullAction.SINGLETON;
      Rule rule0 = new Rule((Pattern) xPathPattern0, (Action) nullAction0);
      Map<String, RuleSet> map0 = mode0.addToNameMap((Map<String, RuleSet>) null, "NF11", rule0);
      assertNotNull(map0);
      
      mode0.removeFromNameMap(map0, "NF11", rule0);
      assertEquals(1, map0.size());
      assertEquals(false, map0.isEmpty());
  }
}
