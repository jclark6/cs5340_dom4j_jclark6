/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import javax.xml.transform.Source;
import javax.xml.transform.sax.SAXSource;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.io.DocumentSource;
import org.dom4j.io.SAXWriter;
import org.dom4j.tree.DefaultDocument;
import org.junit.BeforeClass;
import org.xml.sax.ContentHandler;
import org.xml.sax.InputSource;
import org.xml.sax.Parser;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoSuiteRunner.class)
public class TestDocumentSource {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = (DefaultDocument)defaultDocumentFactory0.createDocument("FnAt>+LN!Kpk1v");
      DocumentSource documentSource0 = new DocumentSource((Node) defaultDocument0);
      assertNull(documentSource0.getSystemId());
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = (DefaultDocument)defaultDocumentFactory0.createDocument("FnAt>+LN!Kpk1v");
      DocumentSource documentSource0 = new DocumentSource((Document) defaultDocument0);
      SAXWriter sAXWriter0 = (SAXWriter)documentSource0.getXMLReader();
      documentSource0.setXMLReader((XMLReader) sAXWriter0);
      assertEquals(false, sAXWriter0.isDeclareNamespaceAttributes());
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DocumentSource documentSource0 = new DocumentSource((Document) defaultDocument0);
      DefaultDocument defaultDocument1 = (DefaultDocument)documentSource0.getDocument();
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n", defaultDocument1.asXML());
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DocumentSource documentSource0 = new DocumentSource((Document) defaultDocument0);
      try {
        documentSource0.setInputSource((InputSource) null);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DocumentSource documentSource0 = new DocumentSource((Document) defaultDocument0);
      InputSource inputSource0 = SAXSource.sourceToInputSource((Source) documentSource0);
      documentSource0.setInputSource(inputSource0);
      assertNull(documentSource0.getSystemId());
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = (DefaultDocument)defaultDocumentFactory0.createDocument("");
      DocumentSource documentSource0 = new DocumentSource((Document) defaultDocument0);
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter((XMLReader) sAXWriter0);
      ParserAdapter parserAdapter0 = new ParserAdapter((Parser) xMLReaderAdapter0);
      try {
        documentSource0.setXMLReader((XMLReader) parserAdapter0);
        fail("Expecting exception: UnsupportedOperationException");
      } catch(UnsupportedOperationException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument();
      DocumentSource documentSource0 = new DocumentSource((Document) defaultDocument0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) xMLFilterImpl0);
      documentSource0.setXMLReader((XMLReader) xMLFilterImpl1);
      assertFalse(xMLFilterImpl1.equals(xMLFilterImpl0));
  }
}
