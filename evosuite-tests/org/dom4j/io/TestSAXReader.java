/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.io.StringReader;
import org.apache.xerces.jaxp.SAXParserImpl;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentException;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.QName;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.util.NonLazyElement;
import org.junit.BeforeClass;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.Parser;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoSuiteRunner.class)
public class TestSAXReader {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      assertEquals(false, sAXReader0.isIncludeInternalDTDDeclarations());
      
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      assertEquals(true, sAXReader0.isIncludeInternalDTDDeclarations());
      assertEquals(false, sAXReader0.isStripWhitespaceText());
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = (DefaultDocumentFactory)DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) defaultDocumentFactory0);
      assertEquals(false, sAXReader0.isMergeAdjacentText());
      
      sAXReader0.setMergeAdjacentText(true);
      assertEquals(true, sAXReader0.isMergeAdjacentText());
      assertEquals(true, sAXReader0.isStringInternEnabled());
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = (DefaultDocumentFactory)DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) defaultDocumentFactory0);
      sAXReader0.setValidation(true);
      assertEquals(true, sAXReader0.isValidating());
      assertEquals(false, sAXReader0.isMergeAdjacentText());
  }

  @Test
  public void test3()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      assertNotNull(sAXReader0);
      
      // Undeclared exception!
      try {
        sAXReader0.setProperty((String) null, "text()");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      assertEquals(false, sAXReader0.isMergeAdjacentText());
      assertEquals(false, sAXReader0.isIncludeInternalDTDDeclarations());
      assertEquals(true, sAXReader0.isStringInternEnabled());
      assertEquals(false, sAXReader0.isStripWhitespaceText());
      assertEquals(false, sAXReader0.isIgnoreComments());
      assertEquals(false, sAXReader0.isIncludeExternalDTDDeclarations());
  }

  @Test
  public void test5()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setErrorHandler((ErrorHandler) handlerBase0);
      StringReader stringReader0 = new StringReader("");
      PushbackReader pushbackReader0 = new PushbackReader((Reader) stringReader0);
      try {
        sAXReader0.read((Reader) pushbackReader0, "");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      try {
        sAXReader0.setXMLReaderClassName(";}@HP^.27dPO%6pIl");
        fail("Expecting exception: SAXException");
      } catch(SAXException e) {
        /*
         * SAX2 driver class ;}@HP^.27dPO%6pIl not found
         */
      }
  }

  @Test
  public void test7()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setDefaultHandler((ElementHandler) null);
      assertEquals(false, sAXReader0.isIgnoreComments());
      assertEquals(false, sAXReader0.isStripWhitespaceText());
      assertEquals(true, sAXReader0.isStringInternEnabled());
      assertEquals(false, sAXReader0.isIncludeExternalDTDDeclarations());
      assertEquals(false, sAXReader0.isMergeAdjacentText());
      assertEquals(false, sAXReader0.isIncludeInternalDTDDeclarations());
  }

  @Test
  public void test8()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      assertNotNull(sAXReader0);
      assertEquals(false, sAXReader0.isIgnoreComments());
      
      sAXReader0.setIgnoreComments(true);
      assertEquals(true, sAXReader0.isIgnoreComments());
  }

  @Test
  public void test9()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXParserImpl.JAXPSAXParser sAXParserImpl_JAXPSAXParser0 = (SAXParserImpl.JAXPSAXParser)sAXReader0.createXMLReader();
      assertNotNull(sAXParserImpl_JAXPSAXParser0);
      
      SAXReader sAXReader1 = new SAXReader((XMLReader) sAXParserImpl_JAXPSAXParser0);
      assertEquals(false, sAXReader1.isIncludeInternalDTDDeclarations());
      assertEquals(false, sAXReader1.isIncludeExternalDTDDeclarations());
      assertEquals(false, sAXReader0.isIgnoreComments());
      assertEquals(false, sAXReader1.isStripWhitespaceText());
      assertEquals(false, sAXReader1.isMergeAdjacentText());
      assertEquals(false, sAXReader0.isMergeAdjacentText());
      assertEquals(false, sAXReader0.isIncludeExternalDTDDeclarations());
      assertEquals(true, sAXReader1.isStringInternEnabled());
      assertEquals(false, sAXReader0.isIncludeInternalDTDDeclarations());
      assertEquals(false, sAXReader1.isIgnoreComments());
      assertEquals(true, sAXReader0.isStringInternEnabled());
      assertEquals(false, sAXReader0.isStripWhitespaceText());
  }

  @Test
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getErrorHandler();
      assertEquals(false, sAXReader0.isIgnoreComments());
      assertEquals(false, sAXReader0.isIncludeExternalDTDDeclarations());
      assertEquals(true, sAXReader0.isStringInternEnabled());
      assertEquals(false, sAXReader0.isStripWhitespaceText());
      assertEquals(false, sAXReader0.isMergeAdjacentText());
      assertEquals(false, sAXReader0.isIncludeInternalDTDDeclarations());
  }

  @Test
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEncoding();
      assertEquals(false, sAXReader0.isStripWhitespaceText());
      assertEquals(false, sAXReader0.isIncludeExternalDTDDeclarations());
      assertEquals(false, sAXReader0.isIgnoreComments());
      assertEquals(false, sAXReader0.isMergeAdjacentText());
      assertEquals(true, sAXReader0.isStringInternEnabled());
      assertEquals(false, sAXReader0.isIncludeInternalDTDDeclarations());
  }

  @Test
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      assertEquals(true, sAXReader0.isStringInternEnabled());
      
      sAXReader0.setStringInternEnabled(false);
      assertEquals(false, sAXReader0.isStringInternEnabled());
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = (DefaultDocumentFactory)DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) defaultDocumentFactory0);
      sAXReader0.addHandler("[DW*u-XqB-[erRPX", (ElementHandler) null);
      sAXReader0.resetHandlers();
      assertEquals(false, sAXReader0.isIgnoreComments());
      assertEquals(false, sAXReader0.isMergeAdjacentText());
      assertEquals(true, sAXReader0.isStringInternEnabled());
      assertEquals(false, sAXReader0.isIncludeInternalDTDDeclarations());
      assertEquals(false, sAXReader0.isIncludeExternalDTDDeclarations());
      assertEquals(false, sAXReader0.isStripWhitespaceText());
  }

  @Test
  public void test14()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("");
      QName qName0 = nonLazyElement0.getQName("");
      DefaultDocumentFactory defaultDocumentFactory0 = (DefaultDocumentFactory)qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) defaultDocumentFactory0, true);
      sAXReader0.removeHandler("");
      assertEquals(false, sAXReader0.isIncludeInternalDTDDeclarations());
      assertEquals(true, sAXReader0.isValidating());
      assertEquals(false, sAXReader0.isIncludeExternalDTDDeclarations());
      assertEquals(false, sAXReader0.isIgnoreComments());
      assertEquals(true, sAXReader0.isStringInternEnabled());
      assertEquals(false, sAXReader0.isMergeAdjacentText());
      assertEquals(false, sAXReader0.isStripWhitespaceText());
  }

  @Test
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEntityResolver();
      assertEquals(false, sAXReader0.isMergeAdjacentText());
      assertEquals(false, sAXReader0.isIncludeExternalDTDDeclarations());
      assertEquals(false, sAXReader0.isIgnoreComments());
      assertEquals(false, sAXReader0.isStripWhitespaceText());
      assertEquals(false, sAXReader0.isIncludeInternalDTDDeclarations());
      assertEquals(true, sAXReader0.isStringInternEnabled());
  }

  @Test
  public void test16()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      assertEquals(false, sAXReader0.isStripWhitespaceText());
      
      sAXReader0.setStripWhitespaceText(true);
      assertEquals(true, sAXReader0.isStripWhitespaceText());
      assertEquals(false, sAXReader0.isMergeAdjacentText());
  }

  @Test
  public void test17()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = (DefaultDocumentFactory)DefaultDocumentFactory.getInstance();
      sAXReader0.setDocumentFactory((DocumentFactory) defaultDocumentFactory0);
      StringReader stringReader0 = new StringReader("");
      PushbackReader pushbackReader0 = new PushbackReader((Reader) stringReader0);
      try {
        sAXReader0.read((Reader) pushbackReader0, "");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLReader((XMLReader) xMLFilterImpl0);
      assertEquals(true, sAXReader0.isStringInternEnabled());
      assertEquals(false, sAXReader0.isIgnoreComments());
      assertEquals(false, sAXReader0.isIncludeExternalDTDDeclarations());
      assertEquals(false, sAXReader0.isIncludeInternalDTDDeclarations());
      assertEquals(false, sAXReader0.isMergeAdjacentText());
      assertEquals(false, sAXReader0.isStripWhitespaceText());
  }

  @Test
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      try {
        sAXReader0.setFeature("2(Vn! )UkTIb!b6>", true);
        fail("Expecting exception: SAXNotRecognizedException");
      } catch(SAXNotRecognizedException e) {
        /*
         * Feature '2(Vn! )UkTIb!b6>' is not recognized.
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setEntityResolver((EntityResolver) xMLFilterImpl0);
      try {
        sAXReader0.read("U|^26X>");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * no protocol: U|^26X> Nested exception: no protocol: U|^26X>
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter((Parser) xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader((XMLReader) parserAdapter0, true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) parserAdapter0);
      try {
        sAXReader0.configureReader((XMLReader) parserAdapter0, (DefaultHandler) sAXContentHandler0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@51f3585 Nested exception: Feature: http://xml.org/sax/features/validation
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("Index value: ");
        fail("Expecting exception: SAXException");
      } catch(SAXException e) {
        /*
         * SAX2 driver class Index value:  not found
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      assertEquals(true, sAXReader0.isStringInternEnabled());
      assertNotNull(sAXReader0);
      assertEquals(false, sAXReader0.isMergeAdjacentText());
      assertEquals(false, sAXReader0.isIncludeExternalDTDDeclarations());
      assertEquals(false, sAXReader0.isIncludeInternalDTDDeclarations());
      assertEquals(false, sAXReader0.isIgnoreComments());
      assertEquals(false, sAXReader0.isStripWhitespaceText());
      assertEquals(true, sAXReader0.isValidating());
  }

  @Test
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("", true);
        fail("Expecting exception: SAXException");
      } catch(SAXException e) {
        /*
         * SAX2 driver class  not found
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      try {
        sAXReader0.read("");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line 1 of document file:///mnt/fastdata/ac1gf/SF110/dist/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         */
      }
  }

  @Test
  public void test26()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sAXReader0.setEncoding("~a+iA?\"FT");
      try {
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line -1 of document  : Invalid encoding name \"~A+IA?\"FT\". Nested exception: Invalid encoding name \"~A+IA?\"FT\".
         */
      }
  }

  @Test
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("p[U6bl7*&_");
      try {
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         */
      }
  }

  @Test
  public void test28()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("p[U6bl7*&_");
      StringReader stringReader0 = new StringReader("p[U6bl7*&_");
      try {
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         */
      }
  }

  @Test
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      FileInputStream fileInputStream0 = new FileInputStream(fileDescriptor0);
      try {
        sAXReader0.read((InputStream) fileInputStream0, "*/mQ.Aem1[]");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Stream Closed Nested exception: Stream Closed
         */
      }
  }

  @Test
  public void test30()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = (DefaultDocumentFactory)DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) defaultDocumentFactory0);
      SAXParserImpl.JAXPSAXParser sAXParserImpl_JAXPSAXParser0 = (SAXParserImpl.JAXPSAXParser)sAXReader0.getXMLReader();
      SAXParserImpl.JAXPSAXParser sAXParserImpl_JAXPSAXParser1 = (SAXParserImpl.JAXPSAXParser)sAXReader0.getXMLReader();
      assertEquals(true, sAXReader0.isStringInternEnabled());
      assertEquals(false, sAXReader0.isMergeAdjacentText());
      assertEquals(false, sAXReader0.isStripWhitespaceText());
      assertEquals(false, sAXReader0.isIncludeInternalDTDDeclarations());
      assertEquals(false, sAXReader0.isIncludeExternalDTDDeclarations());
      assertSame(sAXParserImpl_JAXPSAXParser1, sAXParserImpl_JAXPSAXParser0);
      assertNotNull(sAXParserImpl_JAXPSAXParser1);
      assertEquals(false, sAXReader0.isIgnoreComments());
  }

  @Test
  public void test31()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) xMLFilterImpl0);
      sAXReader0.setXMLFilter((XMLFilter) xMLFilterImpl1);
      try {
        sAXReader0.read("U|^26X>");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * no protocol: U|^26X> Nested exception: no protocol: U|^26X>
         */
      }
  }

  @Test
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      assertEquals(false, sAXReader0.isIncludeExternalDTDDeclarations());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      try {
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Pipe not connected Nested exception: Pipe not connected
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = (DefaultDocumentFactory)DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader((XMLReader) xMLFilterImpl0, defaultHandler0);
      assertEquals(false, sAXReader0.isIncludeInternalDTDDeclarations());
      assertEquals(false, sAXReader0.isIgnoreComments());
      assertEquals(false, sAXReader0.isMergeAdjacentText());
      assertEquals(false, sAXReader0.isStripWhitespaceText());
      assertEquals(true, sAXReader0.isStringInternEnabled());
      assertEquals(false, sAXReader0.isIncludeExternalDTDDeclarations());
  }

  @Test
  public void test34()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      assertNull(inputSource0.getEncoding());
  }

  @Test
  public void test35()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("QT");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("QT", "");
      assertEquals("", inputSource0.getSystemId());
  }

  @Test
  public void test36()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("QT");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, "QT");
      assertNotNull(inputSource0);
      assertEquals("QTQT", inputSource0.getSystemId());
  }

  @Test
  public void test37()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, "OperationNotSupported");
      assertNotNull(inputSource0);
      assertEquals("OperationNotSupported", inputSource0.getSystemId());
  }

  @Test
  public void test38()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Index value: ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("Index value: ", "Index value: ");
      assertEquals("Index value: ", inputSource0.getSystemId());
  }
}
