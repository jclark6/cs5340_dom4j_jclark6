/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentException;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.XPPReader;
import org.gjt.xpp.XmlPullParserException;
import org.gjt.xpp.XmlPullParserFactory;
import org.gjt.xpp.impl.PullParserFactoryFullImpl;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestXPPReader {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      XPPReader xPPReader0 = new XPPReader();
      xPPReader0.setDispatchHandler((DispatchHandler) null);
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = (DefaultDocumentFactory)DefaultDocumentFactory.getInstance();
      XPPReader xPPReader0 = new XPPReader((DocumentFactory) defaultDocumentFactory0);
      xPPReader0.setDocumentFactory((DocumentFactory) defaultDocumentFactory0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XPPReader xPPReader0 = new XPPReader((DocumentFactory) defaultDocumentFactory0);
      xPPReader0.removeHandler("=<Ywa[PrDyPQ4\"/5P");
      xPPReader0.setDefaultHandler((ElementHandler) null);
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XPPReader xPPReader0 = new XPPReader((DocumentFactory) defaultDocumentFactory0);
      xPPReader0.setDefaultHandler((ElementHandler) null);
  }

  @Test
  public void test4()  throws Throwable  {
      XPPReader xPPReader0 = new XPPReader((DocumentFactory) null);
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) byteArrayInputStream0, (InputStream) byteArrayInputStream0);
      try {
        xPPReader0.read((InputStream) sequenceInputStream0, "3'NJKcQHb^=<hL0iF(?");
        fail("Expecting exception: XmlPullParserException");
      } catch(XmlPullParserException e) {
        /*
         * only whitespace content allowed outside root element at line 1 and column 6 seen \u0000\u0000\u0000\u0000\u0000\u0000... (parser state CONTENT)
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      XPPReader xPPReader0 = new XPPReader();
      xPPReader0.addHandler("Index: {0}, Size: {1}", (ElementHandler) null);
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XPPReader xPPReader0 = new XPPReader((DocumentFactory) defaultDocumentFactory0);
      PullParserFactoryFullImpl pullParserFactoryFullImpl0 = (PullParserFactoryFullImpl)xPPReader0.getXPPFactory();
      xPPReader0.setXPPFactory((XmlPullParserFactory) pullParserFactoryFullImpl0);
      assertEquals(false, pullParserFactoryFullImpl0.isNamespaceAware());
  }

  @Test
  public void test7()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = (DefaultDocumentFactory)DefaultDocumentFactory.getInstance();
      XPPReader xPPReader0 = new XPPReader((DocumentFactory) defaultDocumentFactory0);
      // Undeclared exception!
      try {
        xPPReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      XPPReader xPPReader0 = new XPPReader();
      try {
        xPPReader0.read("peN1xq0>}m0fFAq");
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         * peN1xq0>}m0fFAq (No such file or directory)
         */
      }
  }

  @Test
  public void test9()  throws Throwable  {
      XPPReader xPPReader0 = new XPPReader();
      char[] charArray0 = new char[10];
      try {
        xPPReader0.read(charArray0);
        fail("Expecting exception: XmlPullParserException");
      } catch(XmlPullParserException e) {
        /*
         * only whitespace content allowed outside root element at line 1 and column 10 seen \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000... (parser state CONTENT)
         */
      }
  }

  @Test
  public void test10()  throws Throwable  {
      XPPReader xPPReader0 = new XPPReader();
      try {
        xPPReader0.read("Index: {0}, Size: {1}");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
        /*
         * unknown protocol: index
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XPPReader xPPReader0 = new XPPReader((DocumentFactory) defaultDocumentFactory0);
      xPPReader0.getXPPFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try {
        xPPReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }
}
