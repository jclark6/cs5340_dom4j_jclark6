/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import org.dom4j.Attribute;
import org.dom4j.Comment;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.DocumentType;
import org.dom4j.Element;
import org.dom4j.Entity;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.ProcessingInstruction;
import org.dom4j.QName;
import org.dom4j.Text;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMProcessingInstruction;
import org.dom4j.dom.DOMText;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.DefaultEntity;
import org.dom4j.tree.FlyweightAttribute;
import org.dom4j.tree.FlyweightComment;
import org.dom4j.tree.FlyweightText;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.junit.BeforeClass;
import org.xml.sax.Attributes;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.LexicalHandler;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.LocatorImpl;

@RunWith(EvoSuiteRunner.class)
public class TestXMLWriter {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.endPrefixMapping("\"C+\"+e#3  B~8C{");
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test1()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("3)9\"z$");
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0, 0);
      NonLazyElement nonLazyElement1 = (NonLazyElement)nonLazyElement0.addProcessingInstruction("3)9\"z$", "3)9\"z$");
      xMLWriter0.writeElementContent((Element) nonLazyElement1);
      assertEquals("<3)9\"z$><?3)9\"z$ 3)9\"z$?></3)9\"z$>", nonLazyElement0.asXML());
      assertEquals("<3)9\"z$><?3)9\"z$ 3)9\"z$?></3)9\"z$>", nonLazyElement1.asXML());
  }

  @Test
  public void test2()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      char[] charArray0 = new char[2];
      xMLWriter0.comment(charArray0, 0, 0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test3()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.getLexicalHandler();
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test4()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultEntity defaultEntity0 = (DefaultEntity)defaultDocumentFactory0.createEntity(" [ProcessingInstruction: &", " [ProcessingInstruction: &");
      xMLWriter0.write((Entity) defaultEntity0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test5()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.setResolveEntityRefs(true);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test6()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1533);
      PrintStream printStream0 = new PrintStream((OutputStream) byteArrayOutputStream0, true);
      XMLWriter xMLWriter0 = new XMLWriter((OutputStream) printStream0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
      assertNotNull(xMLWriter0);
  }

  @Test
  public void test7()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(1);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      XMLWriter xMLWriter0 = new XMLWriter((Writer) pipedWriter0);
  }

  @Test
  public void test8()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.processingInstruction("@P}", "@P}");
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test9()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(1533);
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.setOutputStream((OutputStream) byteArrayOutputStream0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test10()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      UserDataElement userDataElement0 = new UserDataElement("Zt#6Hhv}.,/q");
      QName qName0 = userDataElement0.getQName("Zt#6Hhv}.,/q");
      FlyweightAttribute flyweightAttribute0 = new FlyweightAttribute(qName0);
      xMLWriter0.write((Attribute) flyweightAttribute0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Variable ");
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.isExpandEmptyElements();
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test12()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
      assertNotNull(xMLWriter0);
      
      xMLWriter0.setMaximumAllowedCharacter((int) '4');
      xMLWriter0.write("C(1<L0d3e`#y");
      assertEquals(52, xMLWriter0.getMaximumAllowedCharacter());
  }

  @Test
  public void test13()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      UserDataElement userDataElement0 = new UserDataElement("");
      QName qName0 = userDataElement0.getQName();
      IndexedElement indexedElement0 = new IndexedElement(qName0, 0);
      xMLWriter0.writeOpen((Element) indexedElement0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test14()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      OutputFormat outputFormat0 = new OutputFormat("/4`3CmCB!rW>([", false);
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0, outputFormat0);
      xMLWriter0.startEntity("/4`3CmCB!rW>([");
      assertEquals("&/4`3CmCB!rW>([;", charArrayWriter0.toString());
      assertEquals(16, charArrayWriter0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      boolean boolean0 = xMLWriter0.isEscapeText();
      assertEquals(true, boolean0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      OutputFormat outputFormat1 = xMLWriter0.getOutputFormat();
      assertNotNull(outputFormat1);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      // Undeclared exception!
      try {
        xMLWriter0.parse((InputSource) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
        /*
         * No parent for filter
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.setEscapeText(true);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.notationDecl("lIi</C!{X~qr+ewp", "{BCuGO", "lIi</C!{X~qr+ewp");
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test20()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      OutputFormat outputFormat0 = new OutputFormat("/4`3CmCB!rW>([", false);
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0, outputFormat0);
      xMLWriter0.endElement("Variable ", ";", ">");
      assertEquals("</>>", charArrayWriter0.toString());
      assertEquals(4, charArrayWriter0.size());
  }

  @Test
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.startDocument();
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test22()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl((Attributes) attributesImpl0);
      xMLWriter0.startElement("", "", "", (Attributes) attributes2Impl0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Variable ");
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      LocatorImpl locatorImpl0 = new LocatorImpl();
      xMLWriter0.setDocumentLocator((Locator) locatorImpl0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      char[] charArray0 = new char[6];
      xMLWriter0.ignorableWhitespace(charArray0, (int) '>', (int) 'U');
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test25()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      FlyweightComment flyweightComment0 = new FlyweightComment("IOException while generating textual representation: ");
      xMLWriter0.write((Comment) flyweightComment0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test26()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("http://xml.org/sax/properties/lexical-handler", "http://xml.org/sax/properties/lexical-handler", "http://xml.org/sax/properties/lexical-handler");
      xMLWriter0.write((DocumentType) dOMDocumentType0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test27()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      OutputFormat outputFormat0 = new OutputFormat(" [ProcessingInstruction: &");
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0, outputFormat0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultEntity defaultEntity0 = (DefaultEntity)defaultDocumentFactory0.createEntity(" [ProcessingInstruction: &", " [ProcessingInstruction: &");
      xMLWriter0.write((Entity) defaultEntity0);
      assertEquals(26, charArrayWriter0.size());
      assertEquals(" [ProcessingInstruction: &", charArrayWriter0.toString());
  }

  @Test
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.write((Namespace) null);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test29()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      OutputFormat outputFormat0 = new OutputFormat(" [ProcessingInstruction: &");
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0, outputFormat0);
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction(" [ProcessingInstruction: &", " [ProcessingInstruction: &");
      xMLWriter0.write((ProcessingInstruction) dOMProcessingInstruction0);
      assertEquals(57, charArrayWriter0.size());
      assertEquals("<? [ProcessingInstruction: &  [ProcessingInstruction: &?>", charArrayWriter0.toString());
  }

  @Test
  public void test30()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.write((Object) "IOException while generating textual representation: ");
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
  }

  @Test
  public void test31()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      xMLWriter0.write((Node) namespace0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      try {
        xMLWriter0.getProperty("");
        fail("Expecting exception: SAXNotRecognizedException");
      } catch(SAXNotRecognizedException e) {
        /*
         * Property: 
         */
      }
  }

  @Test
  public void test33()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      xMLWriter0.setLexicalHandler((LexicalHandler) defaultHandler2_0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.endDocument();
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test35()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      char[] charArray0 = new char[10];
      // Undeclared exception!
      try {
        xMLWriter0.characters(charArray0, (int) 'N', (int) 'x');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: 198
         */
      }
  }

  @Test
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.startDTD("zk[NDxAlhZ:|n", (String) null, "zk[NDxAlhZ:|n");
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      xMLWriter0.endDTD();
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test38()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.startCDATA();
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test39()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      OutputFormat outputFormat0 = new OutputFormat("/4`3CmCB!rW>([", false);
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0, outputFormat0);
      xMLWriter0.endCDATA();
      assertEquals("]]>", charArrayWriter0.toString());
      assertEquals(3, charArrayWriter0.size());
  }

  @Test
  public void test40()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.endEntity(" [ProcessingInstruction: &");
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test41()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      OutputFormat outputFormat0 = new OutputFormat("/4`3CmCB!rW>([", false);
      XMLWriter xMLWriter0 = new XMLWriter((Writer) charArrayWriter0, outputFormat0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = defaultDocumentFactory0.createNamespace("/4`3CmCB!rW>([", ">");
      QName qName0 = defaultDocumentFactory0.createQName("Variable ", namespace0);
      IndexedElement indexedElement0 = new IndexedElement(qName0, (-1206));
      IndexedElement indexedElement1 = (IndexedElement)indexedElement0.addCDATA(">");
      xMLWriter0.write((Element) indexedElement1);
      assertEquals("</4`3CmCB!rW>([:Variable  xmlns:/4`3CmCB!rW>([=\">\"><![CDATA[>]]><//4`3CmCB!rW>([:Variable >", charArrayWriter0.toString());
      assertEquals(91, charArrayWriter0.size());
  }

  @Test
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      DefaultElement defaultElement0 = new DefaultElement("=1!_^gUgbI))]9|9q9$", (Namespace) null);
      defaultElement0.addElement(" [ProcessingInstruction: &", "lIi</C!{X~qr+ewp");
      xMLWriter0.writeNode((Node) defaultElement0);
      assertEquals("<=1!_^gUgbI))]9|9q9$>< [ProcessingInstruction: & xmlns: [ProcessingInstruction=\"lIi</C!{X~qr+ewp\"/></=1!_^gUgbI))]9|9q9$>", defaultElement0.asXML());
  }

  @Test
  public void test43()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.write((DocumentType) null);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test44()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl((Attributes) attributesImpl0);
      xMLWriter0.startPrefixMapping("", "");
      xMLWriter0.startElement("", "", "", (Attributes) attributes2Impl0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test45()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.writeString("");
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      DefaultElement defaultElement0 = new DefaultElement("=1!_^gUgbI))]9|9q9$", (Namespace) null);
      DOMText dOMText0 = new DOMText((Element) defaultElement0, " [ProcessingInstruction: &");
      xMLWriter0.write((Text) dOMText0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
  }

  @Test
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      DOMDocument dOMDocument0 = new DOMDocument();
      xMLWriter0.writeNodeText((Node) dOMDocument0);
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test48()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      OutputFormat outputFormat0 = new OutputFormat("Fl-|f@S|I1?Soj");
      XMLWriter xMLWriter0 = new XMLWriter((Writer) pipedWriter0, outputFormat0);
      assertNotNull(xMLWriter0);
      
      FlyweightText flyweightText0 = new FlyweightText("Fl-|f@S|I1?Soj");
      try {
        xMLWriter0.writeNode((Node) flyweightText0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Pipe not connected
         */
      }
  }

  @Test
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      DefaultElement defaultElement0 = new DefaultElement("=1!_^gUgbI))]9|9q9$", (Namespace) null);
      defaultElement0.addEntity("zk[NDxAlhZ:|n", "zk[NDxAlhZ:|n");
      xMLWriter0.writeNode((Node) defaultElement0);
      assertEquals("<=1!_^gUgbI))]9|9q9$>zk[NDxAlhZ:|n</=1!_^gUgbI))]9|9q9$>", defaultElement0.asXML());
  }

  @Test
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Variable ");
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      assertNotNull(xMLWriter0);
      
      DOMElement dOMElement0 = new DOMElement("Variable ");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      DOMDocument dOMDocument1 = (DOMDocument)dOMDocument0.addComment("Variable ");
      xMLWriter0.write((Document) dOMDocument1);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Variable /><!--Variable -->", dOMDocument0.asXML());
  }

  @Test
  public void test51()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.write("C(1<L0d3e`#y");
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test52()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      String string0 = xMLWriter0.escapeElementEntities("mhR/>FbfV");
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertNotNull(string0);
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
      assertEquals("mhR/&gt;FbfV", string0);
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test53()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      xMLWriter0.writeEscapeAttributeEntities("http://xml.org/sax/properties/lexical-handler");
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
  }

  @Test
  public void test54()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertNotNull(xMLWriter0);
      
      String string0 = xMLWriter0.escapeAttributeEntities("\"-'X.U(Z#|/A^H9`0");
      assertEquals("&quot;-'X.U(Z#|/A^H9`0", string0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
      assertEquals(true, xMLWriter0.isEscapeText());
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
      assertNotNull(string0);
  }

  @Test
  public void test55()  throws Throwable  {
      XMLWriter xMLWriter0 = new XMLWriter();
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
      assertNotNull(xMLWriter0);
      
      xMLWriter0.setMaximumAllowedCharacter((int) '4');
      xMLWriter0.writeEscapeAttributeEntities("http://xml.org/sax/properties/lexical-handler");
      assertEquals(52, xMLWriter0.getMaximumAllowedCharacter());
  }
}
