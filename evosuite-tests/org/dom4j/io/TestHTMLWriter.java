/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.util.Set;
import org.dom4j.CDATA;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.Entity;
import org.dom4j.Node;
import org.dom4j.QName;
import org.dom4j.Text;
import org.dom4j.dom.DOMText;
import org.dom4j.io.HTMLWriter;
import org.dom4j.io.OutputFormat;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.DefaultCDATA;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.junit.BeforeClass;
import org.xml.sax.SAXException;

@RunWith(EvoSuiteRunner.class)
public class TestHTMLWriter {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      HTMLWriter hTMLWriter0 = new HTMLWriter((Writer) charArrayWriter0);
      hTMLWriter0.endElement(".", ".", ".");
      assertEquals(4, charArrayWriter0.size());
      assertEquals("</.>", charArrayWriter0.toString());
  }

  @Test
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      HTMLWriter hTMLWriter0 = new HTMLWriter((OutputStream) pipedOutputStream0);
  }

  @Test
  public void test2()  throws Throwable  {
      try {
        HTMLWriter.prettyPrintXHTML(".");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      HTMLWriter hTMLWriter0 = new HTMLWriter(outputFormat0);
      Set<Object> set0 = hTMLWriter0.getOmitElementCloseSet();
      assertEquals(11, set0.size());
      assertNotNull(set0);
  }

  @Test
  public void test4()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(",");
      HTMLWriter hTMLWriter0 = new HTMLWriter(outputFormat0);
      hTMLWriter0.endCDATA();
      assertEquals(true, hTMLWriter0.isEscapeText());
  }

  @Test
  public void test5()  throws Throwable  {
      try {
        HTMLWriter.prettyPrintHTML("[ name: ");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      HTMLWriter hTMLWriter0 = new HTMLWriter();
      hTMLWriter0.startCDATA();
      assertEquals(-1, hTMLWriter0.getMaximumAllowedCharacter());
  }

  @Test
  public void test7()  throws Throwable  {
      HTMLWriter hTMLWriter0 = new HTMLWriter();
      // Undeclared exception!
      try {
        hTMLWriter0.write((Entity) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      HTMLWriter hTMLWriter0 = new HTMLWriter((OutputStream) byteArrayOutputStream0, outputFormat0);
      Set<String> set0 = hTMLWriter0.getPreformattedTags();
      hTMLWriter0.setOmitElementCloseSet(set0);
      assertEquals(false, set0.isEmpty());
  }

  @Test
  public void test9()  throws Throwable  {
      HTMLWriter hTMLWriter0 = new HTMLWriter();
      hTMLWriter0.writeDeclaration();
      assertEquals(true, hTMLWriter0.isEscapeText());
  }

  @Test
  public void test10()  throws Throwable  {
      HTMLWriter hTMLWriter0 = new HTMLWriter();
      DefaultCDATA defaultCDATA0 = new DefaultCDATA("~#");
      hTMLWriter0.write((CDATA) defaultCDATA0);
      assertEquals(false, defaultCDATA0.isReadOnly());
  }

  @Test
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(",");
      HTMLWriter hTMLWriter0 = new HTMLWriter(outputFormat0);
      outputFormat0.setXHTML(true);
      hTMLWriter0.writeCDATA(",");
      assertEquals(true, hTMLWriter0.isEscapeText());
  }

  @Test
  public void test12()  throws Throwable  {
      HTMLWriter hTMLWriter0 = new HTMLWriter();
      hTMLWriter0.write("");
      assertEquals(-1, hTMLWriter0.getMaximumAllowedCharacter());
  }

  @Test
  public void test13()  throws Throwable  {
      HTMLWriter hTMLWriter0 = new HTMLWriter();
      IndexedElement indexedElement0 = new IndexedElement("\n");
      DOMText dOMText0 = new DOMText((Element) indexedElement0, "\n");
      hTMLWriter0.write((Text) dOMText0);
      assertNull(dOMText0.getName());
  }

  @Test
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(",");
      HTMLWriter hTMLWriter0 = new HTMLWriter(outputFormat0);
      UserDataElement userDataElement0 = new UserDataElement(",");
      outputFormat0.setXHTML(true);
      QName qName0 = userDataElement0.getQName();
      BaseElement baseElement0 = new BaseElement(qName0);
      hTMLWriter0.writeElement((Element) baseElement0);
      assertEquals("", baseElement0.getStringValue());
  }

  @Test
  public void test15()  throws Throwable  {
      HTMLWriter hTMLWriter0 = new HTMLWriter();
      hTMLWriter0.setOmitElementCloseSet((Set<String>) null);
      assertEquals(true, hTMLWriter0.isEscapeText());
  }

  @Test
  public void test16()  throws Throwable  {
      HTMLWriter hTMLWriter0 = new HTMLWriter();
      hTMLWriter0.setPreformattedTags((Set<String>) null);
      assertEquals(-1, hTMLWriter0.getMaximumAllowedCharacter());
  }

  @Test
  public void test17()  throws Throwable  {
      HTMLWriter hTMLWriter0 = new HTMLWriter();
      Set<String> set0 = hTMLWriter0.getPreformattedTags();
      hTMLWriter0.setPreformattedTags(set0);
      assertEquals(4, set0.size());
  }

  @Test
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(",");
      HTMLWriter hTMLWriter0 = new HTMLWriter(outputFormat0);
      UserDataElement userDataElement0 = new UserDataElement(",");
      outputFormat0.setNewLineAfterNTags(884);
      QName qName0 = userDataElement0.getQName();
      BaseElement baseElement0 = new BaseElement(qName0);
      hTMLWriter0.writeElement((Element) baseElement0);
      hTMLWriter0.write((Node) userDataElement0);
      assertEquals(false, userDataElement0.hasContent());
  }

  @Test
  public void test19()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("TEXTAREA");
      nonLazyElement0.addElement("TEXTAREA", "TEXTAREA");
      HTMLWriter hTMLWriter0 = new HTMLWriter();
      hTMLWriter0.write((Node) nonLazyElement0);
      assertEquals("/TEXTAREA", nonLazyElement0.getPath());
  }
}
