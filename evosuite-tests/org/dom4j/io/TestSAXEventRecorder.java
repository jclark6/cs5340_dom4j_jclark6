/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.util.ConcurrentModificationException;
import org.dom4j.io.SAXEventRecorder;
import org.junit.BeforeClass;
import org.xml.sax.Attributes;
import org.xml.sax.ContentHandler;
import org.xml.sax.SAXException;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoSuiteRunner.class)
public class TestSAXEventRecorder {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SAXEventRecorder.SAXEvent sAXEventRecorder_SAXEvent0 = new SAXEventRecorder.SAXEvent();
      Object object0 = sAXEventRecorder_SAXEvent0.getParm(39);
      assertNull(object0);
  }

  @Test
  public void test1()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      sAXEventRecorder0.startElement("Cp$2,B-Li<}/PY0-/g", "Cp$2,B-Li<}/PY0-/g", "Cp$2,B-Li<}/PY0-/g", (Attributes) attributes2Impl0);
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) sAXEventRecorder0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.startEntity("/i5[w<zx85|O");
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) sAXEventRecorder0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test3()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.startCDATA();
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) sAXEventRecorder0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.attributeDecl("/i5[w<zx85|O", "/i5[w<zx85|O", "/i5[w<zx85|O", "/i5[w<zx85|O", "/i5[w<zx85|O");
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) sAXEventRecorder0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test5()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      char[] charArray0 = new char[8];
      sAXEventRecorder0.comment(charArray0, (int) 'I', (-1));
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) sAXEventRecorder0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.startPrefixMapping("/i5[w<zx85|O", "/i5[w<zx85|O");
  }

  @Test
  public void test7()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      char[] charArray0 = new char[5];
      sAXEventRecorder0.characters(charArray0, 0, (-763));
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) sAXEventRecorder0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test8()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.startDocument();
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) sAXEventRecorder0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.endDTD();
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) sAXEventRecorder0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test10()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.endCDATA();
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) sAXEventRecorder0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.endPrefixMapping("");
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) sAXEventRecorder0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test12()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.elementDecl(".MK~bw/ (MyB~H_Mv3", ".MK~bw/ (MyB~H_Mv3");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      sAXEventRecorder0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0001\u0001sr\u0000\u0013java.util.ArrayListx\uFFFD\uFFFD\u001D\uFFFD\uFFFDa\uFFFD\u0003\u0000\u0001I\u0000\u0004sizexp\u0000\u0000\u0000\u0001w\u0004\u0000\u0000\u0000\nsr\u0000&org.dom4j.io.SAXEventRecorder$SAXEvent\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\f\u0000\u0000xpw\u0002\u0010\u0001sq\u0000~\u0000\u0000\u0000\u0000\u0000\u0002w\u0004\u0000\u0000\u0000\u0003t\u0000\u0012.MK~bw/ (MyB~H_Mv3q\u0000~\u0000\u0005xxx", byteArrayOutputStream0.toString());
      assertEquals(164, byteArrayOutputStream0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.externalEntityDecl("_`+KG.#5k~>UfIUl0r.n", "_`+KG.#5k~>UfIUl0r.n", "_`+KG.#5k~>UfIUl0r.n");
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) sAXEventRecorder0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.processingInstruction("/i5[w<zx85|O", "/i5[w<zx85|O");
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) sAXEventRecorder0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test15()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.endEntity("/i5[w<zx85|O");
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) sAXEventRecorder0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test16()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.addAttribute("P,zE", "xmlnsnWbn-m9r5eAU5", "xmlnsnWbn-m9r5eAU5", "P,zE", "P,zE");
      sAXEventRecorder0.startElement("xmlnsnWbn-m9r5eAU5", "xmlnsnWbn-m9r5eAU5", "xmlnsnWbn-m9r5eAU5", (Attributes) attributes2Impl0);
      sAXEventRecorder0.replay((ContentHandler) defaultHandler2_0);
  }

  @Test
  public void test17()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXEventRecorder0.endDocument();
      sAXEventRecorder0.replay((ContentHandler) defaultHandler2_0);
  }

  @Test
  public void test18()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.endElement((String) null, "namespaces", "");
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) sAXEventRecorder0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test19()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      sAXEventRecorder0.startDTD("pK@", "pK@", "pK@");
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) xMLReaderAdapter0);
        fail("Expecting exception: ClassCastException");
      } catch(ClassCastException e) {
        /*
         * org.xml.sax.helpers.XMLReaderAdapter cannot be cast to org.xml.sax.ext.LexicalHandler
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.elementDecl("", "");
      // Undeclared exception!
      try {
        sAXEventRecorder0.replay((ContentHandler) sAXEventRecorder0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test21()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXEventRecorder0.internalEntityDecl("xmlnsnWbn-m9r5eAU5", "xmlnsnWbn-m9r5eAU5");
      sAXEventRecorder0.replay((ContentHandler) defaultHandler2_0);
  }

  @Test
  public void test22()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.addAttribute("xmlnsnWbn-m9r5eAU5", "P,zE", "xmlnsnWbn-m9r5eAU5", "P,zE", "P,zE");
      sAXEventRecorder0.startElement("xmlnsnWbn-m9r5eAU5", "xmlnsnWbn-m9r5eAU5", "xmlnsnWbn-m9r5eAU5", (Attributes) attributes2Impl0);
      sAXEventRecorder0.replay((ContentHandler) defaultHandler2_0);
  }

  @Test
  public void test23()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.startElement((String) null, (String) null, (String) null, (Attributes) null);
  }

  @Test
  public void test24()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.addAttribute("P,zE", "xmlnsnWbn-m9r5eAU5", "xmlnsnWbn-m9r5eAU5", "P,zE", "P,zE");
      sAXEventRecorder0.startElement("xmlnsnWbn-m9r5eAU5", "xmlnsnWbn-m9r5eAU5", "xmlnsnWbn-m9r5eAU5", (Attributes) attributes2Impl0);
      sAXEventRecorder0.startElement("xmlnsnWbn-m9r5eAU5", "xmlnsnWbn-m9r5eAU5", "xmlnsnWbn-m9r5eAU5", (Attributes) attributes2Impl0);
      assertEquals(1, attributes2Impl0.getLength());
  }

  @Test
  public void test25()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      sAXEventRecorder0.endElement("D(c", "D(c", "D(c");
  }

  @Test
  public void test26()  throws Throwable  {
      SAXEventRecorder sAXEventRecorder0 = new SAXEventRecorder();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      sAXEventRecorder0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005w\u0001\u0001sr\u0000\u0013java.util.ArrayListx\uFFFD\uFFFD\u001D\uFFFD\uFFFDa\uFFFD\u0003\u0000\u0001I\u0000\u0004sizexp\u0000\u0000\u0000\u0000w\u0004\u0000\u0000\u0000\nx", byteArrayOutputStream0.toString());
      assertEquals(61, byteArrayOutputStream0.size());
  }

  @Test
  public void test27()  throws Throwable  {
      SAXEventRecorder.SAXEvent sAXEventRecorder_SAXEvent0 = new SAXEventRecorder.SAXEvent((byte) (-1));
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(2037);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream((OutputStream) byteArrayOutputStream0);
      sAXEventRecorder_SAXEvent0.writeExternal((ObjectOutput) objectOutputStream0);
      assertEquals("\uFFFD\uFFFD\u0000\u0005", byteArrayOutputStream0.toString());
      assertEquals(4, byteArrayOutputStream0.size());
  }
}
