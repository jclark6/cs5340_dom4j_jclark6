/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sun.msv.datatype.xsd.XSDatatype;
import java.io.IOException;
import org.dom4j.Branch;
import org.dom4j.CDATA;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.QName;
import org.dom4j.datatype.DatatypeElement;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMEntityReference;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.dom.DOMText;
import org.dom4j.io.SAXWriter;
import org.dom4j.tree.DefaultCDATA;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.DefaultProcessingInstruction;
import org.dom4j.tree.FlyweightAttribute;
import org.dom4j.tree.FlyweightComment;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.junit.BeforeClass;
import org.xml.sax.ContentHandler;
import org.xml.sax.EntityResolver;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.LexicalHandler;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoSuiteRunner.class)
public class TestSAXWriter {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      SAXWriter sAXWriter0 = new SAXWriter();
      sAXWriter0.setXMLReader((XMLReader) sAXWriter0);
      assertEquals(false, sAXWriter0.isDeclareNamespaceAttributes());
  }

  @Test
  public void test1()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLFilterImpl0);
      boolean boolean0 = sAXWriter0.isDeclareNamespaceAttributes();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultHandler defaultHandler0 = new DefaultHandler();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) defaultHandler0, (LexicalHandler) defaultHandler2_0, (EntityResolver) defaultHandler0);
      try {
        sAXWriter0.parse("(:=q<@nm9~");
        fail("Expecting exception: SAXNotSupportedException");
      } catch(SAXNotSupportedException e) {
        /*
         * This XMLReader can only accept <dom4j> InputSource objects
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) defaultHandler2_0, (LexicalHandler) defaultHandler2_0);
      DefaultHandler2 defaultHandler2_1 = (DefaultHandler2)sAXWriter0.getProperty("http://xml.org/sax/handlers/LexicalHandler");
      assertSame(defaultHandler2_1, defaultHandler2_0);
  }

  @Test
  public void test4()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLFilterImpl0, (LexicalHandler) defaultHandler2_0, (EntityResolver) defaultHandler2_0);
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction("org.xml.sax.ext.DeclHandler", "org.xml.sax.ext.DeclHandler");
      sAXWriter0.write((Node) defaultProcessingInstruction0);
      assertEquals("processing-instruction()", defaultProcessingInstruction0.getPath());
  }

  @Test
  public void test5()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLReaderAdapter0);
      UserDataElement userDataElement0 = new UserDataElement("}d$E");
      sAXWriter0.writeOpen((Element) userDataElement0);
      assertEquals(false, userDataElement0.isReadOnly());
  }

  @Test
  public void test6()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLFilterImpl0, (LexicalHandler) defaultHandler2_0);
      NonLazyElement nonLazyElement0 = new NonLazyElement("SCANNER_STATE_PI");
      sAXWriter0.writeClose((Element) nonLazyElement0);
      assertEquals("", nonLazyElement0.getTextTrim());
  }

  @Test
  public void test7()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLFilterImpl0);
      sAXWriter0.setProperty("http://xml.org/sax/properties/lexical-handler", (Object) null);
      assertEquals(false, sAXWriter0.isDeclareNamespaceAttributes());
  }

  @Test
  public void test8()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLReaderAdapter0);
      FlyweightAttribute flyweightAttribute0 = new FlyweightAttribute("endsith", "endsith");
      // Undeclared exception!
      try {
        sAXWriter0.write((Node) flyweightAttribute0);
        fail("Expecting exception: StackOverflowError");
      } catch(StackOverflowError e) {
      }
  }

  @Test
  public void test9()  throws Throwable  {
      DefaultHandler defaultHandler0 = new DefaultHandler();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) defaultHandler0, (LexicalHandler) defaultHandler2_0, (EntityResolver) defaultHandler0);
      DOMText dOMText0 = new DOMText("(:=q<@nm9~");
      sAXWriter0.write((Node) dOMText0);
      assertEquals("text()", dOMText0.getUniquePath());
  }

  @Test
  public void test10()  throws Throwable  {
      SAXWriter sAXWriter0 = new SAXWriter();
      UserDataElement userDataElement0 = new UserDataElement("DTDD9spatcLer#dispatch:Bscanner state=");
      DefaultCDATA defaultCDATA0 = new DefaultCDATA((Element) userDataElement0, "DTDD9spatcLer#dispatch:Bscanner state=");
      // Undeclared exception!
      try {
        sAXWriter0.write((Node) defaultCDATA0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLFilterImpl0, (LexicalHandler) defaultHandler2_0);
      NonLazyElement nonLazyElement0 = new NonLazyElement("SCANNER_STATE_PI");
      DOMEntityReference dOMEntityReference0 = new DOMEntityReference((Element) nonLazyElement0, "SCANNER_STATE_PI", "SCANNER_STATE_PI");
      sAXWriter0.write((Node) dOMEntityReference0);
      assertNull(dOMEntityReference0.getLocalName());
  }

  @Test
  public void test12()  throws Throwable  {
      SAXWriter sAXWriter0 = new SAXWriter();
      FlyweightComment flyweightComment0 = new FlyweightComment("^iRpBv3:;dp0nS[x~0g");
      sAXWriter0.write((Node) flyweightComment0);
      assertEquals("comment()", flyweightComment0.getUniquePath());
  }

  @Test
  public void test13()  throws Throwable  {
      SAXWriter sAXWriter0 = new SAXWriter();
      DOMDocument dOMDocument0 = new DOMDocument();
      // Undeclared exception!
      try {
        sAXWriter0.write((Node) dOMDocument0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test14()  throws Throwable  {
      SAXWriter sAXWriter0 = new SAXWriter();
      sAXWriter0.write((Document) null);
      assertEquals(false, sAXWriter0.isDeclareNamespaceAttributes());
  }

  @Test
  public void test15()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLFilterImpl0);
      NonLazyElement nonLazyElement0 = new NonLazyElement((String) null);
      QName qName0 = nonLazyElement0.getQName(" }");
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, (XSDatatype) null);
      DatatypeElement datatypeElement1 = (DatatypeElement)datatypeElement0.addCDATA((String) null);
      sAXWriter0.write((Node) datatypeElement1);
      assertEquals(false, datatypeElement1.isReadOnly());
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultCDATA defaultCDATA0 = (DefaultCDATA)defaultDocumentFactory0.createCDATA("");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) defaultHandler2_0, (LexicalHandler) defaultHandler2_0, (EntityResolver) defaultHandler2_0);
      sAXWriter0.write((CDATA) defaultCDATA0);
      assertNull(defaultCDATA0.getName());
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultHandler defaultHandler0 = new DefaultHandler();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) defaultHandler0, (LexicalHandler) defaultHandler2_0, (EntityResolver) defaultHandler0);
      DOMDocument dOMDocument0 = new DOMDocument((DOMElement) null);
      DOMDocument dOMDocument1 = (DOMDocument)dOMDocument0.addComment("(:=q<@nm9~");
      sAXWriter0.write((Document) dOMDocument1);
      assertEquals("", dOMDocument1.getText());
  }

  @Test
  public void test18()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLFilterImpl0, (LexicalHandler) null, (EntityResolver) xMLFilterImpl0);
      DOMElement dOMElement0 = new DOMElement("RiE,+E3*Y yztV=F");
      DOMElement dOMElement1 = (DOMElement)dOMElement0.addEntity("RiE,+E3*Y yztV=F", "RiE,+E3*Y yztV=F");
      sAXWriter0.write((Element) dOMElement1);
      assertEquals("RiE,+E3*Y yztV=F", dOMElement1.getNodeName());
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLReaderAdapter0, (LexicalHandler) defaultHandler2_0, (EntityResolver) defaultHandler2_0);
      assertNotNull(sAXWriter0);
      
      boolean boolean0 = sAXWriter0.getFeature("&(uq ~yS");
      assertEquals(false, boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      SAXWriter sAXWriter0 = new SAXWriter();
      assertNotNull(sAXWriter0);
      
      sAXWriter0.setFeature("R:TVd4lU30dC,k", true);
      boolean boolean0 = sAXWriter0.getFeature("R:TVd4lU30dC,k");
      assertEquals(false, sAXWriter0.isDeclareNamespaceAttributes());
      assertEquals(true, boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLFilterImpl0);
      assertNotNull(sAXWriter0);
      
      sAXWriter0.setFeature("R:TVd4lU30dC,k", false);
      boolean boolean0 = sAXWriter0.getFeature("R:TVd4lU30dC,k");
      assertEquals(false, boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      SAXWriter sAXWriter0 = new SAXWriter();
      assertNotNull(sAXWriter0);
      
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter((XMLReader) sAXWriter0);
      try {
        xMLReaderAdapter0.parse("RiE,+E3*Y yztV=F");
        fail("Expecting exception: SAXNotSupportedException");
      } catch(SAXNotSupportedException e) {
        /*
         * This XMLReader can only accept <dom4j> InputSource objects
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLReaderAdapter0);
      sAXWriter0.setProperty("}d$E", "");
      assertEquals(false, sAXWriter0.isDeclareNamespaceAttributes());
  }

  @Test
  public void test24()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLReaderAdapter0, (LexicalHandler) defaultHandler2_0, (EntityResolver) defaultHandler2_0);
      DefaultHandler2 defaultHandler2_1 = (DefaultHandler2)sAXWriter0.getProperty("DTDDispatcher#dispatch: scanner state=");
      assertNull(defaultHandler2_1);
  }

  @Test
  public void test25()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLReaderAdapter0);
      UserDataElement userDataElement0 = new UserDataElement("}d$E");
      Namespace namespace0 = userDataElement0.getNamespace();
      QName qName0 = new QName("}d$E", namespace0);
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0, 0);
      NonLazyElement nonLazyElement1 = (NonLazyElement)nonLazyElement0.addText("}d$E");
      NamespaceStack namespaceStack0 = new NamespaceStack();
      sAXWriter0.write((Element) nonLazyElement1, namespaceStack0);
      assertEquals("}d$E", nonLazyElement1.getTextTrim());
  }

  @Test
  public void test26()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLReaderAdapter0);
      NonLazyElement nonLazyElement0 = new NonLazyElement("not", (Namespace) null);
      nonLazyElement0.addNamespace("not", "not");
      sAXWriter0.write((Element) nonLazyElement0);
      assertEquals("<not xmlns:not=\"not\"></not>", nonLazyElement0.asXML());
  }

  @Test
  public void test27()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLReaderAdapter0);
      UserDataElement userDataElement0 = new UserDataElement("}d$E");
      Namespace namespace0 = userDataElement0.getNamespace();
      QName qName0 = new QName("}d$E", namespace0);
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0, 0);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      NonLazyElement nonLazyElement1 = (NonLazyElement)nonLazyElement0.addProcessingInstruction("}d$E", "}d$E");
      sAXWriter0.writeContent((Branch) nonLazyElement1, namespaceStack0);
      assertEquals("", nonLazyElement1.getNamespacePrefix());
  }

  @Test
  public void test28()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLReaderAdapter0, (LexicalHandler) defaultHandler2_0, (EntityResolver) defaultHandler2_0);
      DOMElement dOMElement0 = new DOMElement("&(uq ~yS");
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("", "", "DTDDispatcher#dispatch: scanner state=");
      DOMDocument dOMDocument0 = new DOMDocument("DTDDispatcher#dispatch: scanner state=", dOMElement0, dOMDocumentType0);
      sAXWriter0.write((Document) dOMDocument0);
      assertNull(dOMDocument0.getLocalName());
  }

  @Test
  public void test29()  throws Throwable  {
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) defaultHandler0);
      DOMDocument dOMDocument0 = new DOMDocument();
      sAXWriter0.write((Document) dOMDocument0);
      assertNull(dOMDocument0.getName());
  }

  @Test
  public void test30()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLFilterImpl0, (LexicalHandler) null, (EntityResolver) xMLFilterImpl0);
      DOMElement dOMElement0 = new DOMElement("RiE,+E3*Y yztV=F");
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument("RiE,+E3*Y yztV=F", dOMElement0, dOMDocumentType0);
      sAXWriter0.entityResolver((Document) dOMDocument0);
      assertNull(dOMDocument0.getNamespaceURI());
  }

  @Test
  public void test31()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) defaultHandler2_0, (LexicalHandler) defaultHandler2_0, (EntityResolver) defaultHandler2_0);
      DOMElement dOMElement0 = new DOMElement("");
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("", "");
      DOMDocument dOMDocument0 = new DOMDocument("N", dOMElement0, dOMDocumentType0);
      sAXWriter0.write((Document) dOMDocument0);
      assertEquals(true, dOMDocument0.hasContent());
  }

  @Test
  public void test32()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLReaderAdapter0);
      assertNotNull(sAXWriter0);
      
      NamespaceStack namespaceStack0 = new NamespaceStack();
      NonLazyElement nonLazyElement0 = new NonLazyElement("nt", (Namespace) null);
      NonLazyElement nonLazyElement1 = (NonLazyElement)nonLazyElement0.addNamespace("nt", "nt");
      sAXWriter0.startPrefixMapping((Element) nonLazyElement1, namespaceStack0);
      sAXWriter0.startPrefixMapping((Element) nonLazyElement1, namespaceStack0);
      assertEquals(1, namespaceStack0.size());
  }

  @Test
  public void test33()  throws Throwable  {
      SAXWriter sAXWriter0 = new SAXWriter();
      DOMElement dOMElement0 = new DOMElement("RiE,+E3*Y yztV=F");
      dOMElement0.addAttribute("RiE,+E3*Y yztV=F", "RiE,+E3*Y yztV=F");
      // Undeclared exception!
      try {
        sAXWriter0.write((Element) dOMElement0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test34()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLReaderAdapter0, (LexicalHandler) defaultHandler2_0, (EntityResolver) defaultHandler2_0);
      assertNotNull(sAXWriter0);
      
      sAXWriter0.setDeclareNamespaceAttributes(true);
      Namespace namespace0 = new Namespace("&(uq ~yS", "&(uq ~yS");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      sAXWriter0.addNamespaceAttribute((AttributesImpl) attributes2Impl0, namespace0);
      assertEquals(true, sAXWriter0.isDeclareNamespaceAttributes());
      assertEquals(1, attributes2Impl0.getLength());
  }

  @Test
  public void test35()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      SAXWriter sAXWriter0 = new SAXWriter((ContentHandler) xMLReaderAdapter0, (LexicalHandler) defaultHandler2_0, (EntityResolver) defaultHandler2_0);
      assertNotNull(sAXWriter0);
      
      sAXWriter0.setDeclareNamespaceAttributes(true);
      Namespace namespace0 = new Namespace("&(uq ~yS", "&(uq ~yS");
      DefaultElement defaultElement0 = new DefaultElement("&(uq ~yS", namespace0);
      defaultElement0.addElement("&(uq ~yS", "&(uq ~yS");
      sAXWriter0.write((Node) defaultElement0);
      assertEquals(true, sAXWriter0.isDeclareNamespaceAttributes());
  }

  @Test
  public void test36()  throws Throwable  {
      SAXWriter sAXWriter0 = new SAXWriter();
      assertNotNull(sAXWriter0);
      
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      DefaultDocumentFactory defaultDocumentFactory0 = (DefaultDocumentFactory)DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack((DocumentFactory) defaultDocumentFactory0);
      boolean boolean0 = sAXWriter0.isIgnoreableNamespace(namespace0, namespaceStack0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test37()  throws Throwable  {
      SAXWriter sAXWriter0 = new SAXWriter();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement("", namespace0);
      DOMNamespace dOMNamespace0 = new DOMNamespace((Element) dOMElement0, "", "");
      NonLazyElement nonLazyElement0 = new NonLazyElement("", (Namespace) dOMNamespace0);
      QName qName0 = nonLazyElement0.getQName();
      IndexedElement indexedElement0 = new IndexedElement(qName0, 0);
      // Undeclared exception!
      try {
        sAXWriter0.write((Element) indexedElement0);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }
}
