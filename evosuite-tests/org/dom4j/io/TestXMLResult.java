/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLResult;
import org.dom4j.io.XMLWriter;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestXMLResult {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      XMLResult xMLResult0 = new XMLResult((Writer) null, outputFormat0);
      assertNull(xMLResult0.getSystemId());
  }

  @Test
  public void test1()  throws Throwable  {
      XMLResult xMLResult0 = new XMLResult();
      XMLWriter xMLWriter0 = new XMLWriter();
      xMLResult0.setXMLWriter(xMLWriter0);
      assertEquals(true, xMLWriter0.resolveEntityRefs());
  }

  @Test
  public void test2()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) byteArrayOutputStream0);
      XMLResult xMLResult0 = new XMLResult((OutputStream) bufferedOutputStream0);
      assertNull(xMLResult0.getSystemId());
  }

  @Test
  public void test3()  throws Throwable  {
      XMLResult xMLResult0 = new XMLResult((Writer) null);
      XMLWriter xMLWriter0 = (XMLWriter)xMLResult0.getHandler();
      assertEquals(-1, xMLWriter0.getMaximumAllowedCharacter());
  }

  @Test
  public void test4()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      XMLResult xMLResult0 = new XMLResult(xMLWriter0);
      XMLWriter xMLWriter1 = xMLResult0.getXMLWriter();
      assertEquals(-1, xMLWriter1.getMaximumAllowedCharacter());
  }

  @Test
  public void test5()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      XMLWriter xMLWriter0 = new XMLWriter(outputFormat0);
      XMLResult xMLResult0 = new XMLResult(xMLWriter0);
      XMLWriter xMLWriter1 = (XMLWriter)xMLResult0.getLexicalHandler();
      assertEquals(true, xMLWriter1.isEscapeText());
  }
}
