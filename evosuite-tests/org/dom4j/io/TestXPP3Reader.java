/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.io;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.BufferedInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedWriter;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentException;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.XPP3Reader;
import org.junit.BeforeClass;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

@RunWith(EvoSuiteRunner.class)
public class TestXPP3Reader {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader((DocumentFactory) null);
      // Undeclared exception!
      try {
        xPP3Reader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = (DefaultDocumentFactory)DefaultDocumentFactory.getInstance();
      XPP3Reader xPP3Reader0 = new XPP3Reader((DocumentFactory) defaultDocumentFactory0);
      xPP3Reader0.setDocumentFactory((DocumentFactory) defaultDocumentFactory0);
  }

  @Test
  public void test2()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      try {
        xPP3Reader0.read("");
        fail("Expecting exception: FileNotFoundException");
      } catch(FileNotFoundException e) {
        /*
         *  (No such file or directory)
         */
      }
  }

  @Test
  public void test3()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      xPP3Reader0.removeHandler("");
  }

  @Test
  public void test4()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream((InputStream) bufferedInputStream0, (InputStream) null);
      try {
        xPP3Reader0.read((InputStream) sequenceInputStream0);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Stream closed
         */
      }
  }

  @Test
  public void test5()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      char[] charArray0 = new char[7];
      try {
        xPP3Reader0.read(charArray0);
        fail("Expecting exception: XmlPullParserException");
      } catch(XmlPullParserException e) {
        /*
         * only whitespace content allowed before start tag and not \\u0 (position: START_DOCUMENT seen \\u0... @1:1) 
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      xPP3Reader0.addHandler("", (ElementHandler) null);
      xPP3Reader0.addHandler("", (ElementHandler) null);
  }

  @Test
  public void test7()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      Class<?> class0 = PipedWriter.class;
      XmlPullParserFactory xmlPullParserFactory0 = XmlPullParserFactory.newInstance("", (Class) class0);
      xPP3Reader0.setXPPFactory(xmlPullParserFactory0);
      XmlPullParserFactory xmlPullParserFactory1 = xPP3Reader0.getXPPFactory();
      assertSame(xmlPullParserFactory1, xmlPullParserFactory0);
      assertNotNull(xmlPullParserFactory1);
      assertEquals(true, xmlPullParserFactory1.isNamespaceAware());
  }

  @Test
  public void test8()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader((DocumentFactory) null);
      xPP3Reader0.setDispatchHandler((DispatchHandler) null);
  }

  @Test
  public void test9()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      xPP3Reader0.setDefaultHandler((ElementHandler) null);
  }

  @Test
  public void test10()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = (DefaultDocumentFactory)DefaultDocumentFactory.getInstance();
      XPP3Reader xPP3Reader0 = new XPP3Reader((DocumentFactory) defaultDocumentFactory0);
      try {
        xPP3Reader0.read("Invalid node type~Cannot add noe: ");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
        /*
         * no protocol: Invalid node type~Cannot add noe: 
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      XPP3Reader xPP3Reader0 = new XPP3Reader();
      xPP3Reader0.getDocumentFactory();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      try {
        xPP3Reader0.read((InputStream) pushbackInputStream0, (String) null);
        fail("Expecting exception: IOException");
      } catch(IOException e) {
        /*
         * Stream closed
         */
      }
  }
}
