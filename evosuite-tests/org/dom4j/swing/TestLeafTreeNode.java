/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.swing;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.Enumeration;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeNode;
import org.dom4j.Node;
import org.dom4j.dom.DOMEntityReference;
import org.dom4j.swing.LeafTreeNode;
import org.dom4j.tree.BaseElement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestLeafTreeNode {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LeafTreeNode leafTreeNode0 = new LeafTreeNode((Node) null);
      Node node0 = leafTreeNode0.getXmlNode();
      assertNull(node0);
  }

  @Test
  public void test1()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement(" eQkuseK ");
      LeafTreeNode leafTreeNode0 = new LeafTreeNode((Node) baseElement0);
      boolean boolean0 = leafTreeNode0.getAllowsChildren();
      assertEquals(false, boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      LeafTreeNode leafTreeNode0 = new LeafTreeNode((Node) null);
      Enumeration<Object> enumeration0 = leafTreeNode0.children();
      assertEquals(false, enumeration0.hasMoreElements());
  }

  @Test
  public void test3()  throws Throwable  {
      LeafTreeNode leafTreeNode0 = new LeafTreeNode((Node) null);
      TreeNode treeNode0 = leafTreeNode0.getParent();
      assertNull(treeNode0);
  }

  @Test
  public void test4()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement(" eQkuseK ");
      LeafTreeNode leafTreeNode0 = new LeafTreeNode((Node) baseElement0);
      int int0 = leafTreeNode0.getChildCount();
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      LeafTreeNode leafTreeNode0 = new LeafTreeNode();
      assertEquals(0, leafTreeNode0.getChildCount());
  }

  @Test
  public void test6()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement(" eQkuseK ");
      LeafTreeNode leafTreeNode0 = new LeafTreeNode((Node) baseElement0);
      TreeNode treeNode0 = leafTreeNode0.getChildAt(0);
      assertNull(treeNode0);
  }

  @Test
  public void test7()  throws Throwable  {
      LeafTreeNode leafTreeNode0 = new LeafTreeNode((Node) null);
      leafTreeNode0.setParent(leafTreeNode0);
      assertEquals(0, leafTreeNode0.getChildCount());
  }

  @Test
  public void test8()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement(" eQkuseK ");
      LeafTreeNode leafTreeNode0 = new LeafTreeNode((Node) baseElement0);
      boolean boolean0 = leafTreeNode0.isLeaf();
      assertEquals(true, boolean0);
  }

  @Test
  public void test9()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement(" eQkuseK ");
      LeafTreeNode leafTreeNode0 = new LeafTreeNode((Node) baseElement0);
      int int0 = leafTreeNode0.getIndex((TreeNode) leafTreeNode0);
      assertEquals((-1), int0);
  }

  @Test
  public void test10()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement(" eQkuseK ");
      DefaultMutableTreeNode defaultMutableTreeNode0 = new DefaultMutableTreeNode((Object) " eQkuseK ");
      LeafTreeNode leafTreeNode0 = new LeafTreeNode((TreeNode) defaultMutableTreeNode0, (Node) baseElement0);
      assertEquals(false, leafTreeNode0.getAllowsChildren());
  }

  @Test
  public void test11()  throws Throwable  {
      DOMEntityReference dOMEntityReference0 = new DOMEntityReference((String) null);
      LeafTreeNode leafTreeNode0 = new LeafTreeNode((Node) dOMEntityReference0);
      String string0 = leafTreeNode0.toString();
      assertEquals("", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement(" eQkuseK ");
      LeafTreeNode leafTreeNode0 = new LeafTreeNode((Node) baseElement0);
      String string0 = leafTreeNode0.toString();
      assertEquals("", string0);
  }
}
