/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.AbstractMap;
import java.util.Collection;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.dom4j.tree.ConcurrentReaderHashMap;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestConcurrentReaderHashMap {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(109);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap1);
      assertEquals(1, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      concurrentReaderHashMap_ValueIterator0.nextElement();
      concurrentReaderHashMap_ValueIterator0.remove();
      assertTrue(concurrentReaderHashMap0.equals(concurrentReaderHashMap1));
  }

  @Test
  public void test1()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1674);
      assertNotNull(concurrentReaderHashMap0);
      
      int int0 = concurrentReaderHashMap0.capacity();
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2048, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap((Map) concurrentReaderHashMap0);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(16, concurrentReaderHashMap1.capacity());
  }

  @Test
  public void test3()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      
      // Undeclared exception!
      try {
        concurrentReaderHashMap0.contains((Object) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test4()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(104);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap1);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap2, (Object) concurrentReaderHashMap1);
      concurrentReaderHashMap0.remove((Object) concurrentReaderHashMap1);
      assertEquals(false, concurrentReaderHashMap0.isEmpty());
      assertEquals("{{{}={}}={}}", concurrentReaderHashMap0.toString());
  }

  @Test
  public void test5()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1674);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      
      // Undeclared exception!
      try {
        concurrentReaderHashMap_KeyIterator0.nextElement();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test6()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(98);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap1);
      assertEquals(1, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap0.new KeyIterator();
      concurrentReaderHashMap_KeyIterator0.nextElement();
      assertEquals(128, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test7()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1674);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = new ConcurrentReaderHashMap.Entry(1674, (Object) concurrentReaderHashMap0, (Object) "1=3_aTJxz )A=-1=1674={}", (ConcurrentReaderHashMap.Entry) null);
      AbstractMap.SimpleEntry<Object, Map.Entry<String, ConcurrentReaderHashMap>> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Map.Entry<String, ConcurrentReaderHashMap>>((Map.Entry<?, ?>) concurrentReaderHashMap_Entry0);
      boolean boolean0 = concurrentReaderHashMap_Entry0.equals((Object) abstractMap_SimpleEntry0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(2048, concurrentReaderHashMap0.capacity());
      assertEquals(true, boolean0);
      assertEquals("{}=1=3_aTJxz )A=-1=1674={}", concurrentReaderHashMap_Entry0.toString());
  }

  @Test
  public void test8()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(104);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap1);
      assertEquals(false, concurrentReaderHashMap0.isEmpty());
      
      concurrentReaderHashMap0.remove((Object) concurrentReaderHashMap1);
      assertEquals(128, concurrentReaderHashMap1.capacity());
  }

  @Test
  public void test9()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(16);
      AbstractMap.SimpleImmutableEntry<ConcurrentReaderHashMap, ConcurrentReaderHashMap> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<ConcurrentReaderHashMap, ConcurrentReaderHashMap>(concurrentReaderHashMap0, concurrentReaderHashMap0);
      AbstractMap.SimpleImmutableEntry<ConcurrentReaderHashMap, Object> abstractMap_SimpleImmutableEntry1 = new AbstractMap.SimpleImmutableEntry<ConcurrentReaderHashMap, Object>((Map.Entry<?, ?>) abstractMap_SimpleImmutableEntry0);
      concurrentReaderHashMap0.put((Object) abstractMap_SimpleImmutableEntry1, (Object) "{}=16");
      assertEquals(false, concurrentReaderHashMap0.isEmpty());
      
      concurrentReaderHashMap0.sremove((Object) abstractMap_SimpleImmutableEntry0, 0);
      assertEquals(true, concurrentReaderHashMap0.isEmpty());
  }

  @Test
  public void test10()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = null;
      try {
        concurrentReaderHashMap0 = new ConcurrentReaderHashMap((-846), (-846));
        fail("Expecting exception: IllegalArgumentException");
      } catch(IllegalArgumentException e) {
        /*
         * Illegal Load factor: -846.0
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(98);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap1);
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertEquals(false, concurrentReaderHashMap0.isEmpty());
      assertEquals(false, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1582, 1582);
      assertNotNull(concurrentReaderHashMap0);
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertEquals(1582.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(true, boolean0);
      assertEquals(2048, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test13()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(109);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap1);
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap1);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(128, concurrentReaderHashMap1.capacity());
  }

  @Test
  public void test14()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      
      concurrentReaderHashMap0.sput((Object) "{}", (Object) null, (-572));
      concurrentReaderHashMap0.remove((Object) "Illegal Load factor: ={}");
      assertEquals(false, concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test15()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(98);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap1);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap2, (Object) concurrentReaderHashMap1);
      concurrentReaderHashMap0.sput((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap2, 0);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals("{{{}={}}={}, {}={{}={}}}", concurrentReaderHashMap0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      
      concurrentReaderHashMap0.remove((Object) "Illegal Load factor: ={}");
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test17()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(109);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap1);
      assertEquals(1, concurrentReaderHashMap0.size());
      
      boolean boolean0 = concurrentReaderHashMap0.contains((Object) concurrentReaderHashMap1);
      assertEquals(true, boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(109);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap0.put((Object) concurrentReaderHashMap1, (Object) concurrentReaderHashMap1);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      boolean boolean0 = concurrentReaderHashMap0.contains((Object) concurrentReaderHashMap2);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(false, boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      
      concurrentReaderHashMap0.sput((Object) "{}", (Object) null, (-572));
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap((Map) concurrentReaderHashMap0);
      assertEquals(false, concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test20()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(4, 4);
      assertNotNull(concurrentReaderHashMap0);
      
      Object object0 = new Object();
      concurrentReaderHashMap0.put(object0, object0);
      assertEquals(1, concurrentReaderHashMap0.size());
      
      concurrentReaderHashMap0.clear();
      assertEquals(4, concurrentReaderHashMap0.capacity());
  }

  @Test
  public void test21()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(104);
      assertNotNull(concurrentReaderHashMap0);
      
      Set<Object> set0 = concurrentReaderHashMap0.keySet();
      Set<Object> set1 = concurrentReaderHashMap0.keySet();
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(128, concurrentReaderHashMap0.capacity());
      assertSame(set1, set0);
      assertNotNull(set1);
  }

  @Test
  public void test22()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(109);
      assertNotNull(concurrentReaderHashMap0);
      
      Collection<Object> collection0 = concurrentReaderHashMap0.values();
      Collection<Object> collection1 = concurrentReaderHashMap0.values();
      assertEquals(128, concurrentReaderHashMap0.capacity());
      assertNotNull(collection1);
      assertSame(collection1, collection0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
  }

  @Test
  public void test23()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(98);
      assertNotNull(concurrentReaderHashMap0);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      
      // Undeclared exception!
      try {
        concurrentReaderHashMap_ValueIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
      }
  }
}
