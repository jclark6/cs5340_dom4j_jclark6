/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.tree;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.io.Serializable;
import java.util.AbstractSequentialList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import org.dom4j.tree.LazyList;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestLazyList {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      LazyList<AbstractSequentialList<Object>> lazyList0 = new LazyList<AbstractSequentialList<Object>>();
      assertNotNull(lazyList0);
      
      LazyList.LazyListIterator lazyList_LazyListIterator0 = lazyList0.new LazyListIterator(0);
      lazyList_LazyListIterator0.add((Serializable) lazyList0);
      boolean boolean0 = lazyList_LazyListIterator0.hasPrevious();
      assertEquals(1, lazyList0.size());
      assertEquals(true, boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      LazyList<Integer> lazyList0 = new LazyList<Integer>();
      assertNotNull(lazyList0);
      
      LazyList.LazyListIterator lazyList_LazyListIterator0 = lazyList0.new LazyListIterator(0);
      assertNotNull(lazyList_LazyListIterator0);
      
      // Undeclared exception!
      try {
        lazyList_LazyListIterator0.set((Serializable) lazyList0);
        fail("Expecting exception: IllegalStateException");
      } catch(IllegalStateException e) {
      }
  }

  @Test
  public void test2()  throws Throwable  {
      LazyList<AbstractSequentialList<Serializable>> lazyList0 = new LazyList<AbstractSequentialList<Serializable>>();
      assertNotNull(lazyList0);
      
      LazyList.LazyListIterator lazyList_LazyListIterator0 = lazyList0.new LazyListIterator(0);
      assertNotNull(lazyList_LazyListIterator0);
      
      int int0 = lazyList_LazyListIterator0.nextIndex();
      assertEquals(0, int0);
      assertEquals(false, lazyList_LazyListIterator0.hasNext());
  }

  @Test
  public void test3()  throws Throwable  {
      LazyList<LazyList<Object>> lazyList0 = new LazyList<LazyList<Object>>();
      assertNotNull(lazyList0);
      
      LazyList.LazyListIterator lazyList_LazyListIterator0 = lazyList0.new LazyListIterator(0);
      assertNotNull(lazyList_LazyListIterator0);
      
      int int0 = lazyList_LazyListIterator0.previousIndex();
      assertEquals(false, lazyList_LazyListIterator0.hasNext());
      assertEquals((-1), int0);
  }

  @Test
  public void test4()  throws Throwable  {
      LazyList<LazyList<Object>> lazyList0 = new LazyList<LazyList<Object>>();
      assertNotNull(lazyList0);
      
      boolean boolean0 = lazyList0.addAll((Collection<?>) lazyList0);
      assertEquals(false, boolean0);
      assertEquals(0, lazyList0.size());
  }

  @Test
  public void test5()  throws Throwable  {
      LazyList<Serializable> lazyList0 = new LazyList<Serializable>((LazyList.Entry<Serializable>) null);
      // Undeclared exception!
      try {
        lazyList0.add(201, 201);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 201, Size: 0
         */
      }
  }

  @Test
  public void test6()  throws Throwable  {
      LazyList<AbstractSequentialList<Object>> lazyList0 = new LazyList<AbstractSequentialList<Object>>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      lazyList0.add((AbstractSequentialList<Object>) linkedList0);
      assertEquals(false, lazyList0.isEmpty());
      
      boolean boolean0 = lazyList0.retainAll((Collection<?>) linkedList0);
      assertEquals(true, boolean0);
  }

  @Test
  public void test7()  throws Throwable  {
      LazyList<LazyList<Object>> lazyList0 = new LazyList<LazyList<Object>>();
      assertNotNull(lazyList0);
      
      // Undeclared exception!
      try {
        lazyList0.remove(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1, Size: 0
         */
      }
  }

  @Test
  public void test8()  throws Throwable  {
      LazyList<Object> lazyList0 = new LazyList<Object>();
      assertNotNull(lazyList0);
      
      lazyList0.clear();
      assertEquals(0, lazyList0.size());
      assertEquals("[]", lazyList0.toString());
  }

  @Test
  public void test9()  throws Throwable  {
      LazyList<Object> lazyList0 = new LazyList<Object>();
      assertNotNull(lazyList0);
      
      LazyList<LazyList<Object>> lazyList1 = new LazyList<LazyList<Object>>();
      lazyList1.add(0, lazyList0);
      assertEquals("[[]]", lazyList1.toString());
      assertEquals(1, lazyList1.size());
  }

  @Test
  public void test10()  throws Throwable  {
      LazyList<Object> lazyList0 = new LazyList<Object>();
      assertNotNull(lazyList0);
      
      LazyList<LazyList<Object>> lazyList1 = new LazyList<LazyList<Object>>();
      lazyList0.add((Object) lazyList1);
      // Undeclared exception!
      try {
        lazyList0.addAll(0, (Collection<?>) lazyList0);
        fail("Expecting exception: ConcurrentModificationException");
      } catch(ConcurrentModificationException e) {
      }
  }

  @Test
  public void test11()  throws Throwable  {
      LazyList<Object> lazyList0 = new LazyList<Object>();
      assertNotNull(lazyList0);
      
      LazyList<LazyList<Object>> lazyList1 = new LazyList<LazyList<Object>>();
      lazyList0.add((Object) lazyList1);
      LazyList<Object> lazyList2 = (LazyList<Object>)lazyList0.clone();
      boolean boolean0 = lazyList2.addAll(0, (Collection<?>) lazyList0);
      assertEquals(1, lazyList0.size());
      assertEquals(true, boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      LazyList<Object> lazyList0 = new LazyList<Object>();
      assertNotNull(lazyList0);
      
      LazyList<LazyList<Object>> lazyList1 = new LazyList<LazyList<Object>>();
      lazyList0.add((Object) lazyList1);
      lazyList0.set(0, (Object) "[]");
      assertEquals(1, lazyList0.size());
      assertEquals(false, lazyList0.isEmpty());
  }

  @Test
  public void test13()  throws Throwable  {
      LazyList<Serializable> lazyList0 = new LazyList<Serializable>();
      assertNotNull(lazyList0);
      
      List<Serializable> list0 = lazyList0.subList(0, 0);
      assertEquals("[]", lazyList0.toString());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test14()  throws Throwable  {
      LazyList<Serializable> lazyList0 = new LazyList<Serializable>();
      assertNotNull(lazyList0);
      
      Object[] objectArray0 = lazyList0.toArray();
      lazyList0.add((Serializable) objectArray0);
      lazyList0.subList(0, 0);
      assertEquals(1, lazyList0.size());
      assertEquals("[[Ljava.lang.Object;@3d219ebe]", lazyList0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      LazyList<AbstractSequentialList<Serializable>> lazyList0 = new LazyList<AbstractSequentialList<Serializable>>();
      assertNotNull(lazyList0);
      
      lazyList0.createIndexedList();
      // Undeclared exception!
      try {
        lazyList0.get((-96));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      } catch(ArrayIndexOutOfBoundsException e) {
        /*
         * -96
         */
      }
  }

  @Test
  public void test16()  throws Throwable  {
      LazyList<Serializable> lazyList0 = new LazyList<Serializable>();
      assertNotNull(lazyList0);
      
      LazyList<AbstractSequentialList<Serializable>> lazyList1 = new LazyList<AbstractSequentialList<Serializable>>();
      lazyList1.add((AbstractSequentialList<Serializable>) lazyList0);
      lazyList1.createIndexedList();
      assertEquals(1, lazyList1.size());
      assertEquals("[[]]", lazyList1.toString());
  }

  @Test
  public void test17()  throws Throwable  {
      LazyList<AbstractSequentialList<Serializable>> lazyList0 = new LazyList<AbstractSequentialList<Serializable>>();
      assertNotNull(lazyList0);
      
      // Undeclared exception!
      try {
        lazyList0.getEntry((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: -1, Size: 0
         */
      }
  }

  @Test
  public void test18()  throws Throwable  {
      LazyList<LazyList<Object>> lazyList0 = new LazyList<LazyList<Object>>();
      assertNotNull(lazyList0);
      
      LazyList<Object> lazyList1 = new LazyList<Object>();
      lazyList0.add(lazyList1);
      lazyList0.add(lazyList1);
      lazyList0.remove(1);
      assertEquals(1, lazyList0.size());
      assertEquals("[[]]", lazyList0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      LazyList<LazyList<Serializable>> lazyList0 = new LazyList<LazyList<Serializable>>();
      assertNotNull(lazyList0);
      
      // Undeclared exception!
      try {
        lazyList0.getEntryHeader((-16));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: -16, Size: 0
         */
      }
  }

  @Test
  public void test20()  throws Throwable  {
      LazyList<LazyList<Object>> lazyList0 = new LazyList<LazyList<Object>>();
      assertNotNull(lazyList0);
      
      // Undeclared exception!
      try {
        lazyList0.listIterator(1170);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * Index: 1,170, Size: 0
         */
      }
  }

  @Test
  public void test21()  throws Throwable  {
      LazyList<LazyList<Object>> lazyList0 = new LazyList<LazyList<Object>>();
      assertNotNull(lazyList0);
      
      LazyList<Object> lazyList1 = new LazyList<Object>();
      lazyList0.add(lazyList1);
      lazyList0.add(lazyList1);
      LazyList.LazyListIterator lazyList_LazyListIterator0 = lazyList0.new LazyListIterator(1);
      assertEquals(2, lazyList0.size());
      assertEquals("[[], []]", lazyList0.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      LazyList<LazyList<String>> lazyList0 = new LazyList<LazyList<String>>();
      assertNotNull(lazyList0);
      
      // Undeclared exception!
      try {
        lazyList0.subList((-335), (-335));
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * FromIndex: -335, ToIndex: -335, Size: 0
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      LazyList<Integer> lazyList0 = new LazyList<Integer>();
      assertNotNull(lazyList0);
      
      // Undeclared exception!
      try {
        lazyList0.subList(1420, 1420);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * FromIndex: 1,420, ToIndex: 1,420, Size: 0
         */
      }
  }

  @Test
  public void test24()  throws Throwable  {
      LazyList<String> lazyList0 = new LazyList<String>();
      assertNotNull(lazyList0);
      
      // Undeclared exception!
      try {
        lazyList0.removeRange(1, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      } catch(IndexOutOfBoundsException e) {
        /*
         * FromIndex: 1, ToIndex: 0, Size: 0
         */
      }
  }

  @Test
  public void test25()  throws Throwable  {
      LazyList<LazyList<Object>> lazyList0 = new LazyList<LazyList<Object>>();
      assertNotNull(lazyList0);
      
      LazyList<Object> lazyList1 = new LazyList<Object>();
      lazyList0.add(lazyList1);
      lazyList0.add(lazyList1);
      lazyList0.removeRange(0, 1);
      assertEquals(2, lazyList0.size());
      assertEquals("[[], null]", lazyList0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      LazyList<Serializable> lazyList0 = new LazyList<Serializable>();
      assertNotNull(lazyList0);
      
      LazyList.Entry<Serializable> lazyList_Entry0 = lazyList0.getEntryHeader(0);
      assertNotNull(lazyList_Entry0);
      
      // Undeclared exception!
      try {
        lazyList0.removeEntry(lazyList_Entry0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test27()  throws Throwable  {
      LazyList<Object> lazyList0 = new LazyList<Object>();
      assertNotNull(lazyList0);
      
      LazyList.LazyListIterator lazyList_LazyListIterator0 = lazyList0.new LazyListIterator(0);
      assertNotNull(lazyList_LazyListIterator0);
      
      // Undeclared exception!
      try {
        lazyList_LazyListIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  @Test
  public void test28()  throws Throwable  {
      LazyList<Object> lazyList0 = new LazyList<Object>();
      assertNotNull(lazyList0);
      
      LazyList<AbstractSequentialList<Serializable>> lazyList1 = new LazyList<AbstractSequentialList<Serializable>>();
      lazyList0.lastIndexOf((Object) lazyList1);
      assertEquals(true, lazyList0.isEmpty());
      assertEquals(0, lazyList1.size());
  }

  @Test
  public void test29()  throws Throwable  {
      LazyList<AbstractSequentialList<Object>> lazyList0 = new LazyList<AbstractSequentialList<Object>>();
      assertNotNull(lazyList0);
      
      LazyList.LazyListIterator lazyList_LazyListIterator0 = lazyList0.new LazyListIterator(0);
      lazyList_LazyListIterator0.add((Serializable) lazyList0);
      lazyList_LazyListIterator0.previous();
      assertEquals(1, lazyList0.size());
      assertEquals(0, lazyList_LazyListIterator0.nextIndex());
  }

  @Test
  public void test30()  throws Throwable  {
      LazyList<AbstractSequentialList<Object>> lazyList0 = new LazyList<AbstractSequentialList<Object>>();
      assertNotNull(lazyList0);
      
      LazyList.LazyListIterator lazyList_LazyListIterator0 = lazyList0.new LazyListIterator(0);
      assertNotNull(lazyList_LazyListIterator0);
      
      // Undeclared exception!
      try {
        lazyList_LazyListIterator0.previous();
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }
}
