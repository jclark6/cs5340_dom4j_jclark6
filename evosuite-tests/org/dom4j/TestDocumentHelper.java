/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import java.util.List;
import java.util.Map;
import org.dom4j.Branch;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentException;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.InvalidXPathException;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.NodeType;
import org.dom4j.ProcessingInstruction;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.tree.DefaultAttribute;
import org.dom4j.tree.DefaultCDATA;
import org.dom4j.tree.DefaultComment;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.DefaultEntity;
import org.dom4j.tree.DefaultProcessingInstruction;
import org.dom4j.tree.DefaultText;
import org.dom4j.util.IndexedElement;
import org.dom4j.xpath.DefaultXPath;
import org.jaxen.SimpleVariableContext;
import org.jaxen.VariableContext;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestDocumentHelper {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName0 = new QName("", namespace0);
      IndexedElement indexedElement0 = new IndexedElement(qName0);
      DefaultAttribute defaultAttribute0 = (DefaultAttribute)DocumentHelper.createAttribute((Element) indexedElement0, qName0, "");
      assertEquals(NodeType.ATTRIBUTE_NODE, defaultAttribute0.getNodeTypeEnum());
  }

  @Test
  public void test1()  throws Throwable  {
      DefaultProcessingInstruction defaultProcessingInstruction0 = (DefaultProcessingInstruction)DocumentHelper.createProcessingInstruction("<qxml", "<qxml");
      assertEquals(7, defaultProcessingInstruction0.getNodeType());
  }

  @Test
  public void test2()  throws Throwable  {
      DefaultElement defaultElement0 = (DefaultElement)DocumentHelper.createElement("<?xmlo2n9_,|fW6^");
      assertEquals(0, defaultElement0.attributeCount());
  }

  @Test
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try {
        DocumentHelper.createPattern("");
        fail("Expecting exception: InvalidXPathException");
      } catch(InvalidXPathException e) {
        /*
         * Invalid XPath expression:  Unexpected ''
         */
      }
  }

  @Test
  public void test4()  throws Throwable  {
      QName qName0 = new QName("p1:tion");
      IndexedElement indexedElement0 = new IndexedElement(qName0);
      List<Namespace> list0 = indexedElement0.additionalNamespaces();
      DocumentHelper.sort((List<?>) list0, "p1:tion");
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test5()  throws Throwable  {
      DefaultText defaultText0 = (DefaultText)DocumentHelper.createText("http://xml.org/sax/features/allow-dtd-events-after-endDTD");
      assertEquals(true, defaultText0.supportsParent());
  }

  @Test
  public void test6()  throws Throwable  {
      DefaultDocument defaultDocument0 = (DefaultDocument)DocumentHelper.createDocument();
      List<?> list0 = DocumentHelper.selectNodes("P4x", (Node) defaultDocument0);
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test7()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName0 = new QName("", namespace0);
      IndexedElement indexedElement0 = new IndexedElement(qName0);
      DefaultDocument defaultDocument0 = (DefaultDocument)DocumentHelper.createDocument((Element) indexedElement0);
      assertNotNull(defaultDocument0);
      assertEquals(true, indexedElement0.isRootElement());
  }

  @Test
  public void test8()  throws Throwable  {
      DefaultComment defaultComment0 = (DefaultComment)DocumentHelper.createComment("http://xml.org/sax/features/allow-dtd-events-after-endDTD");
      assertEquals("http://xml.org/sax/features/allow-dtd-events-after-endDTD", defaultComment0.getStringValue());
  }

  @Test
  public void test9()  throws Throwable  {
      Namespace namespace0 = DocumentHelper.createNamespace("Location path cannot end with //", "Location path cannot end with //");
      assertEquals("Location path cannot end with //", namespace0.getStringValue());
  }

  @Test
  public void test10()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("qDw=+LRT", (Namespace) null, (Object) null);
      List<ProcessingInstruction> list0 = beanElement0.processingInstructions();
      // Undeclared exception!
      try {
        DocumentHelper.selectNodes("qDw=+LRT", (List<?>) list0);
        fail("Expecting exception: InvalidXPathException");
      } catch(InvalidXPathException e) {
        /*
         * Invalid XPath expression: qDw=+LRT Unexpected '+'
         */
      }
  }

  @Test
  public void test11()  throws Throwable  {
      QName qName0 = DocumentHelper.createQName("Location path cannot end with //");
      assertEquals("", qName0.getNamespaceURI());
  }

  @Test
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try {
        DocumentHelper.createProcessingInstruction("5euHQa*", (Map) null);
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test13()  throws Throwable  {
      DefaultEntity defaultEntity0 = (DefaultEntity)DocumentHelper.createEntity("http://xml.org/sax/features/allow-dtd-events-after-endDTD", "http://xml.org/sax/features/allow-dtd-events-after-endDTD");
      assertEquals(false, defaultEntity0.hasContent());
  }

  @Test
  public void test14()  throws Throwable  {
      QName qName0 = new QName("p1:tion");
      IndexedElement indexedElement0 = new IndexedElement(qName0);
      List<ProcessingInstruction> list0 = indexedElement0.processingInstructions();
      DocumentHelper.sort((List<?>) list0, "p1:tion", false);
      assertEquals(0, list0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("qDw=+LRT");
      QName qName0 = indexedElement0.getQName();
      DefaultElement defaultElement0 = (DefaultElement)DocumentHelper.createElement(qName0);
      assertEquals("Element", defaultElement0.getNodeTypeName());
  }

  @Test
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try {
        DocumentHelper.createXPathFilter("<qxml");
        fail("Expecting exception: InvalidXPathException");
      } catch(InvalidXPathException e) {
        /*
         * Invalid XPath expression: <qxml Unexpected '<'
         */
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = defaultDocumentFactory0.createNamespace("P4x", "P4x");
      QName qName0 = DocumentHelper.createQName("P4x", namespace0);
      assertEquals("P4x:P4x", qName0.getQualifiedName());
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultAttribute defaultAttribute0 = (DefaultAttribute)DocumentHelper.createAttribute((Element) null, "<?xmlo2n9_,|fW6^", "<?xmlo2n9_,|fW6^");
      assertEquals(false, defaultAttribute0.hasContent());
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultCDATA defaultCDATA0 = (DefaultCDATA)DocumentHelper.createCDATA("http://xml.org/sax/features/allow-dtd-events-after-endDTD");
      assertEquals(true, defaultCDATA0.supportsParent());
  }

  @Test
  public void test20()  throws Throwable  {
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      DefaultXPath defaultXPath0 = (DefaultXPath)DocumentHelper.createXPath("p1:tion", (VariableContext) simpleVariableContext0);
      assertEquals("[XPath: p1:tion]", defaultXPath0.toString());
  }

  @Test
  public void test21()  throws Throwable  {
      try {
        DocumentHelper.parseText("Location path cannot end with //");
        fail("Expecting exception: DocumentException");
      } catch(DocumentException e) {
        /*
         * Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         */
      }
  }

  @Test
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try {
        DocumentHelper.parseText("<?xmlo2n9_,|fW6^");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -1
         */
      }
  }

  @Test
  public void test23()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("s\"[owRq\":");
      // Undeclared exception!
      try {
        DocumentHelper.makeElement((Branch) indexedElement0, "s\"[owRq\":");
        fail("Expecting exception: NullPointerException");
      } catch(NullPointerException e) {
      }
  }

  @Test
  public void test24()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = (DefaultDocument)defaultDocumentFactory0.createDocument((Element) null);
      DefaultElement defaultElement0 = (DefaultElement)DocumentHelper.makeElement((Branch) defaultDocument0, "http://xml.org/sax/features/allow-dtd-events-after-endDTD");
      DefaultElement defaultElement1 = (DefaultElement)DocumentHelper.makeElement((Branch) defaultDocument0, "http://xml.org/sax/features/allow-dtd-events-after-endDTD");
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<http:><xml.org><sax><features><allow-dtd-events-after-endDTD/></features></sax></xml.org></http:>", defaultDocument0.asXML());
      assertSame(defaultElement1, defaultElement0);
  }
}
