/*
 * This file was automatically generated by EvoSuite
 */

package org.dom4j.util;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.evosuite.junit.EvoSuiteRunner;
import static org.junit.Assert.*;
import com.sun.msv.datatype.xsd.XSDatatype;
import org.dom4j.Attribute;
import org.dom4j.Branch;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.DocumentType;
import org.dom4j.Element;
import org.dom4j.Entity;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.ProcessingInstruction;
import org.dom4j.QName;
import org.dom4j.datatype.DatatypeElement;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMProcessingInstruction;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.DefaultAttribute;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultDocumentType;
import org.dom4j.tree.DefaultEntity;
import org.dom4j.tree.DefaultProcessingInstruction;
import org.dom4j.tree.FlyweightAttribute;
import org.dom4j.tree.FlyweightEntity;
import org.dom4j.tree.FlyweightProcessingInstruction;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NodeComparator;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.junit.BeforeClass;

@RunWith(EvoSuiteRunner.class)
public class TestNodeComparator {

  @BeforeClass 
  public static void initEvoSuiteFramework(){ 
    org.evosuite.Properties.REPLACE_CALLS = true; 
  } 


  @Test
  public void test0()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      UserDataElement userDataElement0 = new UserDataElement("");
      UserDataElement userDataElement1 = (UserDataElement)userDataElement0.addComment("");
      DefaultDocument defaultDocument0 = (DefaultDocument)defaultDocumentFactory0.createDocument((Element) userDataElement1);
      int int0 = nodeComparator0.compare((Document) defaultDocument0, (Document) defaultDocument0);
      assertEquals(0, int0);
  }

  @Test
  public void test1()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName((String) null, "", "");
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 584, (XSDatatype) null);
      assertEquals("org.dom4j.datatype.DatatypeElement1091860465 [Element: < attributes: [] data: null />]", datatypeElement0.toString());
      
      DatatypeElement datatypeElement1 = (DatatypeElement)datatypeElement0.addCDATA((String) null);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("", "");
      DefaultDocument defaultDocument0 = new DefaultDocument("", (Element) datatypeElement0, (DocumentType) dOMDocumentType0);
      int int0 = nodeComparator0.compareContent((Branch) datatypeElement1, (Branch) defaultDocument0);
      assertEquals(3, int0);
  }

  @Test
  public void test2()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocument defaultDocument0 = (DefaultDocument)defaultDocumentFactory0.createDocument();
      int int0 = nodeComparator0.compare((Node) defaultDocument0, (Node) defaultDocument0);
      assertEquals(0, int0);
  }

  @Test
  public void test3()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      QName qName0 = QName.get("org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]", "W3Bxw7`{l#;-9", "W3Bxw7`{l#;-9");
      FlyweightAttribute flyweightAttribute0 = new FlyweightAttribute(qName0, "org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]");
      int int0 = nodeComparator0.compare((Node) flyweightAttribute0, (Node) flyweightAttribute0);
      assertEquals(0, int0);
  }

  @Test
  public void test4()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      BaseElement baseElement0 = new BaseElement("W3Bxw7`{l#;-9", namespace0);
      BaseElement baseElement1 = (BaseElement)baseElement0.addText("W3Bxw7`{l#;-9");
      int int0 = nodeComparator0.compare((Element) baseElement1, (Element) baseElement1);
      assertEquals(0, int0);
  }

  @Test
  public void test5()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName((String) null, "", "");
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 584, (XSDatatype) null);
      assertEquals("org.dom4j.datatype.DatatypeElement623952637 [Element: < attributes: [] data: null />]", datatypeElement0.toString());
      
      DatatypeElement datatypeElement1 = (DatatypeElement)datatypeElement0.addCDATA((String) null);
      int int0 = nodeComparator0.compare((Element) datatypeElement1, (Element) datatypeElement1);
      assertEquals(0, int0);
  }

  @Test
  public void test6()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      BaseElement baseElement0 = new BaseElement("W3Bxw7`{l#;-9", namespace0);
      BaseElement baseElement1 = (BaseElement)baseElement0.addEntity("org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]", "org.dom4j.Namespace@babe [Namespace: prefix  mapped to URI \"\"]");
      int int0 = nodeComparator0.compare((Element) baseElement1, (Element) baseElement1);
      assertEquals(0, int0);
  }

  @Test
  public void test7()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction("V);@[\"cY<o}IhH]v", "V);@[\"cY<o}IhH]v");
      int int0 = nodeComparator0.compare((Node) defaultProcessingInstruction0, (Node) defaultProcessingInstruction0);
      assertEquals(0, int0);
  }

  @Test
  public void test8()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("", "");
      int int0 = nodeComparator0.compare((Node) dOMDocumentType0, (Node) dOMDocumentType0);
      assertEquals(0, int0);
  }

  @Test
  public void test9()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      Namespace namespace0 = Namespace.get("h6~7-\"yJ`55:u", "h6~7-\"yJ`55:u");
      int int0 = nodeComparator0.compare((Node) namespace0, (Node) namespace0);
      assertEquals(0, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("V~;@[\"cY<o}IhHnv", "V~;@[\"cY<o}IhHnv", "V~;@[\"cY<o}IhHnv");
      BaseElement baseElement0 = new BaseElement(qName0);
      UserDataElement userDataElement0 = new UserDataElement("V~;@[\"cY<o}IhHnv");
      int int0 = nodeComparator0.compare((Element) userDataElement0, (Element) baseElement0);
      assertEquals((-16), int0);
  }

  @Test
  public void test11()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("V);@[\"cY<o}IhH]v", "V);@[\"cY<o}IhH]v", "V);@[\"cY<o}IhH]v");
      BaseElement baseElement0 = new BaseElement(qName0);
      baseElement0.addAttribute(qName0, "V);@[\"cY<o}IhH]v");
      IndexedElement indexedElement0 = new IndexedElement(qName0);
      int int0 = nodeComparator0.compare((Element) baseElement0, (Element) indexedElement0);
      assertEquals(1, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("V);@[\"cY<o}IhH]v", "V);@[\"cY<o}IhH]v", "V);@[\"cY<o}IhH]v");
      BaseElement baseElement0 = new BaseElement(qName0);
      BaseElement baseElement1 = (BaseElement)baseElement0.addAttribute(qName0, "V);@[\"cY<o}IhH]v");
      int int0 = nodeComparator0.compare((Element) baseElement1, (Element) baseElement1);
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("a", "a", "a");
      IndexedElement indexedElement0 = new IndexedElement(qName0, 0);
      Namespace namespace0 = indexedElement0.getNamespace();
      DefaultAttribute defaultAttribute0 = new DefaultAttribute("a", "a", namespace0);
      DefaultAttribute defaultAttribute1 = new DefaultAttribute((Element) indexedElement0, "jQWrSqUp'", "a", namespace0);
      int int0 = nodeComparator0.compare((Attribute) defaultAttribute0, (Attribute) defaultAttribute1);
      assertEquals((-9), int0);
  }

  @Test
  public void test14()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      UserDataElement userDataElement0 = new UserDataElement("");
      Namespace namespace0 = userDataElement0.getNamespace();
      Namespace namespace1 = Namespace.XML_NAMESPACE;
      int int0 = nodeComparator0.compare(namespace0, namespace1);
      assertEquals((-36), int0);
  }

  @Test
  public void test15()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("", "");
      DefaultDocumentType defaultDocumentType0 = new DefaultDocumentType();
      int int0 = nodeComparator0.compare((DocumentType) dOMDocumentType0, (DocumentType) defaultDocumentType0);
      assertEquals(1, int0);
  }

  @Test
  public void test16()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("", "");
      int int0 = nodeComparator0.compare((DocumentType) null, (DocumentType) dOMDocumentType0);
      assertEquals((-1), int0);
  }

  @Test
  public void test17()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("tX", "tX");
      int int0 = nodeComparator0.compare((DocumentType) dOMDocumentType0, (DocumentType) null);
      assertEquals(1, int0);
  }

  @Test
  public void test18()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("", "");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentType defaultDocumentType0 = (DefaultDocumentType)defaultDocumentFactory0.createDocType("", "", "");
      int int0 = nodeComparator0.compare((Node) defaultDocumentType0, (Node) dOMDocumentType0);
      assertEquals(1, int0);
  }

  @Test
  public void test19()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DefaultDocumentType defaultDocumentType0 = new DefaultDocumentType();
      DefaultDocumentType defaultDocumentType1 = new DefaultDocumentType();
      int int0 = nodeComparator0.compare((DocumentType) defaultDocumentType1, (DocumentType) defaultDocumentType0);
      assertEquals(0, int0);
  }

  @Test
  public void test20()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FlyweightEntity flyweightEntity0 = new FlyweightEntity("set(int,Object) unsupported", "set(int,Object) unsupported");
      DefaultEntity defaultEntity0 = (DefaultEntity)defaultDocumentFactory0.createEntity("", "set(int,Object) unsupported");
      int int0 = nodeComparator0.compare((Entity) defaultEntity0, (Entity) flyweightEntity0);
      assertEquals((-27), int0);
  }

  @Test
  public void test21()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("tX", "tX");
      FlyweightProcessingInstruction flyweightProcessingInstruction0 = new FlyweightProcessingInstruction("T^7*tk", "tX");
      int int0 = nodeComparator0.compare((ProcessingInstruction) dOMProcessingInstruction0, (ProcessingInstruction) flyweightProcessingInstruction0);
      assertEquals(32, int0);
  }

  @Test
  public void test22()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName((String) null, "begUW([Tw<V", "begUW([Tw<V");
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0);
      IndexedElement indexedElement0 = new IndexedElement(qName0);
      IndexedElement indexedElement1 = (IndexedElement)indexedElement0.addComment("begUW([Tw<V");
      int int0 = nodeComparator0.compare((Element) nonLazyElement0, (Element) indexedElement1);
      assertEquals((-1), int0);
  }

  @Test
  public void test23()  throws Throwable  {
      NodeComparator nodeComparator0 = new NodeComparator();
      int int0 = nodeComparator0.compare((String) null, "h6~7-\"yJ`55:u");
      assertEquals((-1), int0);
  }
}
